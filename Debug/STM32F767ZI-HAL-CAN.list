
STM32F767ZI-HAL-CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004854  08004854  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800485c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  080048cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080048cc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a17b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000199f  00000000  00000000  0002a219  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265b5  00000000  00000000  0002cc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007858  00000000  00000000  00053235  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0d66  00000000  00000000  0005aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b7f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  0014b870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004758 	.word	0x08004758

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004758 	.word	0x08004758

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 0xFF);
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	2201      	movs	r2, #1
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <uart_putc+0x24>)
 80005f8:	f002 ffd8 	bl	80035ac <HAL_UART_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000009c 	.word	0x2000009c

08000608 <uart_puts>:
void uart_puts(char *str) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000610:	e006      	b.n	8000620 <uart_puts+0x18>
		uart_putc(*str++);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffe0 	bl	80005e0 <uart_putc>
	while (*str) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f4      	bne.n	8000612 <uart_puts+0xa>
	}
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;
uint8_t cnt;

uint32_t candata[9];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b09f      	sub	sp, #124	; 0x7c
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
	RxHeader.IDE = CAN_ID_EXT;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800063a:	2204      	movs	r2, #4
 800063c:	609a      	str	r2, [r3, #8]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData)
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000640:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000642:	2100      	movs	r1, #0
 8000644:	4819      	ldr	r0, [pc, #100]	; (80006ac <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000646:	f001 f84f 	bl	80016e8 <HAL_CAN_GetRxMessage>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
			!= HAL_OK) {
		Error_Handler();
 8000650:	f000 fa78 	bl	8000b44 <Error_Handler>
 8000654:	e00a      	b.n	800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	} else if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData)
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800065a:	2100      	movs	r1, #0
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800065e:	f001 f843 	bl	80016e8 <HAL_CAN_GetRxMessage>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
			!= HAL_OK) {
		Error_Handler();
 8000668:	f000 fa6c 	bl	8000b44 <Error_Handler>
	}

	char buf[100];
	sprintf(buf, " id=%d [0]=%d [1]=%d[2]=%d\r\n", RxHeader.StdId, RxData[0],
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461c      	mov	r4, r3
			RxData[1], RxData[2]);
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000678:	785b      	ldrb	r3, [r3, #1]
	sprintf(buf, " id=%d [0]=%d [1]=%d[2]=%d\r\n", RxHeader.StdId, RxData[0],
 800067a:	4619      	mov	r1, r3
			RxData[1], RxData[2]);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800067e:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, " id=%d [0]=%d [1]=%d[2]=%d\r\n", RxHeader.StdId, RxData[0],
 8000680:	f107 000c 	add.w	r0, r7, #12
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	9100      	str	r1, [sp, #0]
 8000688:	4623      	mov	r3, r4
 800068a:	490a      	ldr	r1, [pc, #40]	; (80006b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800068c:	f003 fc5e 	bl	8003f4c <siprintf>
	uart_puts(buf);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ffb7 	bl	8000608 <uart_puts>
}
 800069a:	bf00      	nop
 800069c:	3774      	adds	r7, #116	; 0x74
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000019c 	.word	0x2000019c
 80006a8:	20000154 	.word	0x20000154
 80006ac:	2000015c 	.word	0x2000015c
 80006b0:	20000120 	.word	0x20000120
 80006b4:	08004770 	.word	0x08004770

080006b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09a      	sub	sp, #104	; 0x68
 80006bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006be:	f000 fc58 	bl	8000f72 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c2:	f000 f8a5 	bl	8000810 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c6:	f000 fa19 	bl	8000afc <MX_GPIO_Init>
	MX_CAN1_Init();
 80006ca:	f000 f931 	bl	8000930 <MX_CAN1_Init>
	MX_CAN2_Init();
 80006ce:	f000 f987 	bl	80009e0 <MX_CAN2_Init>
	MX_USART3_UART_Init();
 80006d2:	f000 f9e3 	bl	8000a9c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	char buf[100] = "Hello\r\n";
 80006d6:	4a45      	ldr	r2, [pc, #276]	; (80007ec <main+0x134>)
 80006d8:	463b      	mov	r3, r7
 80006da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006de:	e883 0003 	stmia.w	r3, {r0, r1}
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	225c      	movs	r2, #92	; 0x5c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fc26 	bl	8003f3c <memset>
	HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 80006f0:	4639      	mov	r1, r7
 80006f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f6:	2264      	movs	r2, #100	; 0x64
 80006f8:	483d      	ldr	r0, [pc, #244]	; (80007f0 <main+0x138>)
 80006fa:	f002 ff57 	bl	80035ac <HAL_UART_Transmit>

	uint32_t loopNum = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	667b      	str	r3, [r7, #100]	; 0x64

	HAL_CAN_Start(&hcan1);
 8000702:	483c      	ldr	r0, [pc, #240]	; (80007f4 <main+0x13c>)
 8000704:	f000 fe9c 	bl	8001440 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000708:	2102      	movs	r1, #2
 800070a:	483a      	ldr	r0, [pc, #232]	; (80007f4 <main+0x13c>)
 800070c:	f001 f8fe 	bl	800190c <HAL_CAN_ActivateNotification>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <main+0x62>
			!= HAL_OK) {
		Error_Handler();
 8000716:	f000 fa15 	bl	8000b44 <Error_Handler>
	}
	HAL_CAN_Start(&hcan2);
 800071a:	4837      	ldr	r0, [pc, #220]	; (80007f8 <main+0x140>)
 800071c:	f000 fe90 	bl	8001440 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000720:	2102      	movs	r1, #2
 8000722:	4835      	ldr	r0, [pc, #212]	; (80007f8 <main+0x140>)
 8000724:	f001 f8f2 	bl	800190c <HAL_CAN_ActivateNotification>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <main+0x7a>
			!= HAL_OK) {
		Error_Handler();
 800072e:	f000 fa09 	bl	8000b44 <Error_Handler>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sprintf(buf, "%ld\t", loopNum);
 8000732:	463b      	mov	r3, r7
 8000734:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000736:	4931      	ldr	r1, [pc, #196]	; (80007fc <main+0x144>)
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fc07 	bl	8003f4c <siprintf>
		uart_puts(buf);
 800073e:	463b      	mov	r3, r7
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff61 	bl	8000608 <uart_puts>
		sprintf(buf, "\r\n");
 8000746:	463b      	mov	r3, r7
 8000748:	4a2d      	ldr	r2, [pc, #180]	; (8000800 <main+0x148>)
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	8019      	strh	r1, [r3, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	0c12      	lsrs	r2, r2, #16
 8000754:	701a      	strb	r2, [r3, #0]
		uart_puts(buf);
 8000756:	463b      	mov	r3, r7
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff55 	bl	8000608 <uart_puts>
		loopNum++;
 800075e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000760:	3301      	adds	r3, #1
 8000762:	667b      	str	r3, [r7, #100]	; 0x64
		TxHeader.StdId = 0x003;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <main+0x14c>)
 8000766:	2203      	movs	r2, #3
 8000768:	601a      	str	r2, [r3, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x14c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <main+0x14c>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = 3;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <main+0x14c>)
 8000778:	2203      	movs	r2, #3
 800077a:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <main+0x14c>)
 800077e:	2200      	movs	r2, #0
 8000780:	751a      	strb	r2, [r3, #20]
		TxData[0] = 100;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <main+0x150>)
 8000784:	2264      	movs	r2, #100	; 0x64
 8000786:	701a      	strb	r2, [r3, #0]
		TxData[1] = 200;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <main+0x150>)
 800078a:	22c8      	movs	r2, #200	; 0xc8
 800078c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <main+0x150>)
 8000790:	2200      	movs	r2, #0
 8000792:	709a      	strb	r2, [r3, #2]

		/* Request transmission */
		if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox)
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <main+0x154>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <main+0x150>)
 8000798:	491a      	ldr	r1, [pc, #104]	; (8000804 <main+0x14c>)
 800079a:	4817      	ldr	r0, [pc, #92]	; (80007f8 <main+0x140>)
 800079c:	f000 fe94 	bl	80014c8 <HAL_CAN_AddTxMessage>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <main+0xf2>
				!= HAL_OK) {
			/* Transmission request Error */
			Error_Handler();
 80007a6:	f000 f9cd 	bl	8000b44 <Error_Handler>
		}
		//HAL_Delay(10);
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) != 3) {
 80007aa:	bf00      	nop
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <main+0x140>)
 80007ae:	f000 ff66 	bl	800167e <HAL_CAN_GetTxMailboxesFreeLevel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d1f9      	bne.n	80007ac <main+0xf4>
		}

		TxHeader.StdId = 0x004;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <main+0x14c>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <main+0x154>)
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <main+0x150>)
 80007c2:	4910      	ldr	r1, [pc, #64]	; (8000804 <main+0x14c>)
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <main+0x13c>)
 80007c6:	f000 fe7f 	bl	80014c8 <HAL_CAN_AddTxMessage>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <main+0x11c>
				!= HAL_OK) {
			/* Transmission request Error */
			Error_Handler();
 80007d0:	f000 f9b8 	bl	8000b44 <Error_Handler>
		}

		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 80007d4:	bf00      	nop
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <main+0x13c>)
 80007d8:	f000 ff51 	bl	800167e <HAL_CAN_GetTxMailboxesFreeLevel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d1f9      	bne.n	80007d6 <main+0x11e>
		}
		HAL_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fc22 	bl	800102c <HAL_Delay>
	while (1) {
 80007e8:	e7a3      	b.n	8000732 <main+0x7a>
 80007ea:	bf00      	nop
 80007ec:	0800479c 	.word	0x0800479c
 80007f0:	2000009c 	.word	0x2000009c
 80007f4:	2000015c 	.word	0x2000015c
 80007f8:	20000120 	.word	0x20000120
 80007fc:	08004790 	.word	0x08004790
 8000800:	08004798 	.word	0x08004798
 8000804:	20000184 	.word	0x20000184
 8000808:	20000148 	.word	0x20000148
 800080c:	20000150 	.word	0x20000150

08000810 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b0b8      	sub	sp, #224	; 0xe0
 8000814:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000816:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fb8c 	bl	8003f3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000824:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2290      	movs	r2, #144	; 0x90
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fb7d 	bl	8003f3c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <SystemClock_Config+0x118>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a38      	ldr	r2, [pc, #224]	; (8000928 <SystemClock_Config+0x118>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b36      	ldr	r3, [pc, #216]	; (8000928 <SystemClock_Config+0x118>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <SystemClock_Config+0x11c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a33      	ldr	r2, [pc, #204]	; (800092c <SystemClock_Config+0x11c>)
 8000860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <SystemClock_Config+0x11c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000896:	23d8      	movs	r3, #216	; 0xd8
 8000898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fd89 	bl	80023c4 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xac>
		Error_Handler();
 80008b8:	f000 f944 	bl	8000b44 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80008bc:	f001 fd32 	bl	8002324 <HAL_PWREx_EnableOverDrive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xba>
		Error_Handler();
 80008c6:	f000 f93d 	bl	8000b44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80008ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008f0:	2107      	movs	r1, #7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 f814 	bl	8002920 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xf2>
		Error_Handler();
 80008fe:	f000 f921 	bl	8000b44 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000906:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000908:	2300      	movs	r3, #0
 800090a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4618      	mov	r0, r3
 8000912:	f002 f9d7 	bl	8002cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x110>
		Error_Handler();
 800091c:	f000 f912 	bl	8000b44 <Error_Handler>
	}
}
 8000920:	bf00      	nop
 8000922:	37e0      	adds	r7, #224	; 0xe0
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000938:	4a28      	ldr	r2, [pc, #160]	; (80009dc <MX_CAN1_Init+0xac>)
 800093a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 12;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_CAN1_Init+0xa8>)
 800093e:	220c      	movs	r2, #12
 8000940:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_CAN1_Init+0xa8>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000950:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000954:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800095c:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000960:	2200      	movs	r2, #0
 8000962:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000966:	2200      	movs	r2, #0
 8000968:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_CAN1_Init+0xa8>)
 800096c:	2200      	movs	r2, #0
 800096e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000972:	2200      	movs	r2, #0
 8000974:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000978:	2200      	movs	r2, #0
 800097a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_CAN1_Init+0xa8>)
 800097e:	2200      	movs	r2, #0
 8000980:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <MX_CAN1_Init+0xa8>)
 8000984:	f000 fb74 	bl	8001070 <HAL_CAN_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_CAN1_Init+0x62>
		Error_Handler();
 800098e:	f000 f8d9 	bl	8000b44 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x02 << 5;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x02 << 5;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x02 << 5;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x02 << 5;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80009b6:	230e      	movs	r3, #14
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_CAN1_Init+0xa8>)
 80009c0:	f000 fc52 	bl	8001268 <HAL_CAN_ConfigFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_CAN1_Init+0x9e>
		Error_Handler();
 80009ca:	f000 f8bb 	bl	8000b44 <Error_Handler>
	}

	/* USER CODE END CAN1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000015c 	.word	0x2000015c
 80009dc:	40006400 	.word	0x40006400

080009e0 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_CAN2_Init+0xb4>)
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <MX_CAN2_Init+0xb8>)
 80009ea:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 12;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_CAN2_Init+0xb4>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_CAN2_Init+0xb4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_CAN2_Init+0xb4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a00:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000a04:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a0c:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a34:	f000 fb1c 	bl	8001070 <HAL_CAN_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_CAN2_Init+0x62>
		Error_Handler();
 8000a3e:	f000 f881 	bl	8000b44 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	CAN_FilterTypeDef filter;
	uint32_t fId1 = 0x000 << 21;  // フィルターID1
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fId2 = 0x100 << 21;  // フィルターID2
 8000a46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = fId1 >> 16;            // フィルターID1の上位16ビット
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	0c1b      	lsrs	r3, r3, #16
 8000a50:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = fId1;                  // フィルターID1の下位16ビット
 8000a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a54:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = fId2 >> 16;            // フィルターID2の上位16ビット
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = fId2;                  // フィルターID2の下位16ビット
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	60fb      	str	r3, [r7, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT; // 32モード
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDLIST; // IDリストモード
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
	filter.SlaveStartFilterBank = 14;
 8000a70:	230e      	movs	r3, #14
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterActivation = ENABLE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan2, &filter) != HAL_OK) {
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_CAN2_Init+0xb4>)
 8000a7e:	f000 fbf3 	bl	8001268 <HAL_CAN_ConfigFilter>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_CAN2_Init+0xac>
		Error_Handler();
 8000a88:	f000 f85c 	bl	8000b44 <Error_Handler>
	}

	/* USER CODE END CAN2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000120 	.word	0x20000120
 8000a98:	40006800 	.word	0x40006800

08000a9c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART3_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ae0:	f002 fd16 	bl	8003510 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000aea:	f000 f82b 	bl	8000b44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000009c 	.word	0x2000009c
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x44>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <MX_GPIO_Init+0x44>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_GPIO_Init+0x44>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_GPIO_Init+0x44>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <MX_GPIO_Init+0x44>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_GPIO_Init+0x44>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b4a:	e7fe      	b.n	8000b4a <Error_Handler+0x6>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a5b      	ldr	r2, [pc, #364]	; (8000d20 <HAL_CAN_MspInit+0x18c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d14a      	bne.n	8000c4c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	; (8000d24 <HAL_CAN_MspInit+0x190>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a59      	ldr	r2, [pc, #356]	; (8000d24 <HAL_CAN_MspInit+0x190>)
 8000bbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bc0:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <HAL_CAN_MspInit+0x190>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10b      	bne.n	8000be0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bc8:	4b57      	ldr	r3, [pc, #348]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a56      	ldr	r2, [pc, #344]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b54      	ldr	r3, [pc, #336]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a50      	ldr	r2, [pc, #320]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c0a:	2309      	movs	r3, #9
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4845      	ldr	r0, [pc, #276]	; (8000d2c <HAL_CAN_MspInit+0x198>)
 8000c16:	f001 f9db 	bl	8001fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2013      	movs	r0, #19
 8000c20:	f001 f99f 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c24:	2013      	movs	r0, #19
 8000c26:	f001 f9b8 	bl	8001f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	2014      	movs	r0, #20
 8000c30:	f001 f997 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c34:	2014      	movs	r0, #20
 8000c36:	f001 f9b0 	bl	8001f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	2015      	movs	r0, #21
 8000c40:	f001 f98f 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c44:	2015      	movs	r0, #21
 8000c46:	f001 f9a8 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000c4a:	e065      	b.n	8000d18 <HAL_CAN_MspInit+0x184>
  else if(hcan->Instance==CAN2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a37      	ldr	r2, [pc, #220]	; (8000d30 <HAL_CAN_MspInit+0x19c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d160      	bne.n	8000d18 <HAL_CAN_MspInit+0x184>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_CAN_MspInit+0x190>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <HAL_CAN_MspInit+0x190>)
 8000c8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_CAN_MspInit+0x190>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10b      	bne.n	8000cb0 <HAL_CAN_MspInit+0x11c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_CAN_MspInit+0x194>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cc8:	2360      	movs	r3, #96	; 0x60
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4812      	ldr	r0, [pc, #72]	; (8000d2c <HAL_CAN_MspInit+0x198>)
 8000ce4:	f001 f974 	bl	8001fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 4, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2104      	movs	r1, #4
 8000cec:	203f      	movs	r0, #63	; 0x3f
 8000cee:	f001 f938 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000cf2:	203f      	movs	r0, #63	; 0x3f
 8000cf4:	f001 f951 	bl	8001f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	2040      	movs	r0, #64	; 0x40
 8000cfe:	f001 f930 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d02:	2040      	movs	r0, #64	; 0x40
 8000d04:	f001 f949 	bl	8001f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 6, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	2041      	movs	r0, #65	; 0x41
 8000d0e:	f001 f928 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d12:	2041      	movs	r0, #65	; 0x41
 8000d14:	f001 f941 	bl	8001f9a <HAL_NVIC_EnableIRQ>
}
 8000d18:	bf00      	nop
 8000d1a:	3738      	adds	r7, #56	; 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40006400 	.word	0x40006400
 8000d24:	2000008c 	.word	0x2000008c
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40006800 	.word	0x40006800

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x7c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d128      	bne.n	8000da8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000da4:	f001 f914 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40004800 	.word	0x40004800
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020c00 	.word	0x40020c00

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8f0 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <CAN1_TX_IRQHandler+0x10>)
 8000e16:	f000 fd9f 	bl	8001958 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000015c 	.word	0x2000015c

08000e24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <CAN1_RX0_IRQHandler+0x10>)
 8000e2a:	f000 fd95 	bl	8001958 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000015c 	.word	0x2000015c

08000e38 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <CAN1_RX1_IRQHandler+0x10>)
 8000e3e:	f000 fd8b 	bl	8001958 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000015c 	.word	0x2000015c

08000e4c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <CAN2_TX_IRQHandler+0x10>)
 8000e52:	f000 fd81 	bl	8001958 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000120 	.word	0x20000120

08000e60 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <CAN2_RX0_IRQHandler+0x10>)
 8000e66:	f000 fd77 	bl	8001958 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000120 	.word	0x20000120

08000e74 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <CAN2_RX1_IRQHandler+0x10>)
 8000e7a:	f000 fd6d 	bl	8001958 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000120 	.word	0x20000120

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f003 f816 	bl	8003ee8 <__errno>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20080000 	.word	0x20080000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20000090 	.word	0x20000090
 8000ef0:	200001e8 	.word	0x200001e8

08000ef4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <SystemInit+0x28>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <SystemInit+0x28>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SystemInit+0x28>)
 8000f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f26:	e003      	b.n	8000f30 <LoopCopyDataInit>

08000f28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f2e:	3104      	adds	r1, #4

08000f30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f38:	d3f6      	bcc.n	8000f28 <CopyDataInit>
  ldr  r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f3c:	e002      	b.n	8000f44 <LoopFillZerobss>

08000f3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f40:	f842 3b04 	str.w	r3, [r2], #4

08000f44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f48:	d3f9      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd3 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f002 ffd1 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fbb1 	bl	80006b8 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f5c:	0800485c 	.word	0x0800485c
  ldr  r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f64:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f68:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f6c:	200001e4 	.word	0x200001e4

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>

08000f72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 ffe8 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f805 	bl	8000f8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f82:	f7ff fde3 	bl	8000b4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f803 	bl	8001fb6 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 ffcb 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	200001dc 	.word	0x200001dc

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200001dc 	.word	0x200001dc

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fd80 	bl	8000b94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0202 	bic.w	r2, r2, #2
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb6 	bl	8001014 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb2 	bl	8001014 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e5      	bne.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ff90 	bl	8001014 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ff8c 	bl	8001014 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0e5      	beq.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001280:	7cfb      	ldrb	r3, [r7, #19]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d003      	beq.n	800128e <HAL_CAN_ConfigFilter+0x26>
 8001286:	7cfb      	ldrb	r3, [r7, #19]
 8001288:	2b02      	cmp	r3, #2
 800128a:	f040 80c7 	bne.w	800141c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a69      	ldr	r2, [pc, #420]	; (8001438 <HAL_CAN_ConfigFilter+0x1d0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d001      	beq.n	800129c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <HAL_CAN_ConfigFilter+0x1d4>)
 800129a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4a63      	ldr	r2, [pc, #396]	; (800143c <HAL_CAN_ConfigFilter+0x1d4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d111      	bne.n	80012d8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	2201      	movs	r2, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d123      	bne.n	800134a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	401a      	ands	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001324:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3248      	adds	r2, #72	; 0x48
 800132a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001340:	6979      	ldr	r1, [r7, #20]
 8001342:	3348      	adds	r3, #72	; 0x48
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d122      	bne.n	8001398 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001372:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3248      	adds	r2, #72	; 0x48
 8001378:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138e:	6979      	ldr	r1, [r7, #20]
 8001390:	3348      	adds	r3, #72	; 0x48
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013b2:	e007      	b.n	80013c4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013de:	e007      	b.n	80013f0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d107      	bne.n	8001408 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800140e:	f023 0201 	bic.w	r2, r3, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	e006      	b.n	800142a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
  }
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40003400 	.word	0x40003400
 800143c:	40006400 	.word	0x40006400

08001440 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d12e      	bne.n	80014b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff fdd2 	bl	8001014 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001472:	e012      	b.n	800149a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001474:	f7ff fdce 	bl	8001014 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d90b      	bls.n	800149a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e012      	b.n	80014c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e5      	bne.n	8001474 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e006      	b.n	80014c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
  }
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_AddTxMessage+0x2c>
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 80b8 	bne.w	8001664 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10a      	bne.n	8001514 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80a0 	beq.w	8001654 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	0e1b      	lsrs	r3, r3, #24
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d907      	bls.n	8001534 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e09e      	b.n	8001672 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001534:	2201      	movs	r2, #1
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	409a      	lsls	r2, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	6809      	ldr	r1, [r1, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3318      	adds	r3, #24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	440b      	add	r3, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e00f      	b.n	8001582 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001576:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3318      	adds	r3, #24
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	440b      	add	r3, r1
 8001580:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3318      	adds	r3, #24
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3304      	adds	r3, #4
 8001594:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	7d1b      	ldrb	r3, [r3, #20]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d111      	bne.n	80015c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3318      	adds	r3, #24
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	3304      	adds	r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3318      	adds	r3, #24
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	440b      	add	r3, r1
 80015be:	3304      	adds	r3, #4
 80015c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3307      	adds	r3, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3306      	adds	r3, #6
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3305      	adds	r3, #5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	3204      	adds	r2, #4
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	4610      	mov	r0, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6811      	ldr	r1, [r2, #0]
 80015ea:	ea43 0200 	orr.w	r2, r3, r0
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3303      	adds	r3, #3
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	061a      	lsls	r2, r3, #24
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3302      	adds	r3, #2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	4610      	mov	r0, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	ea43 0200 	orr.w	r2, r3, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	440b      	add	r3, r1
 800162a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800162e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3318      	adds	r3, #24
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	6811      	ldr	r1, [r2, #0]
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3318      	adds	r3, #24
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	440b      	add	r3, r1
 800164e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e00e      	b.n	8001672 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e006      	b.n	8001672 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
  }
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001690:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d002      	beq.n	800169e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d11d      	bne.n	80016da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d003      	beq.n	800170c <HAL_CAN_GetRxMessage+0x24>
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b02      	cmp	r3, #2
 8001708:	f040 80f3 	bne.w	80018f2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10e      	bne.n	8001730 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d116      	bne.n	800174e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0e7      	b.n	8001900 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0d8      	b.n	8001900 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	331b      	adds	r3, #27
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0204 	and.w	r2, r3, #4
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10c      	bne.n	8001786 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	331b      	adds	r3, #27
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0d5b      	lsrs	r3, r3, #21
 800177c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e00b      	b.n	800179e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	331b      	adds	r3, #27
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	331b      	adds	r3, #27
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0202 	and.w	r2, r3, #2
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	331b      	adds	r3, #27
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 020f 	and.w	r2, r3, #15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	331b      	adds	r3, #27
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	3304      	adds	r3, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	331b      	adds	r3, #27
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	3304      	adds	r3, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0a1a      	lsrs	r2, r3, #8
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0c1a      	lsrs	r2, r3, #16
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3302      	adds	r3, #2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e1a      	lsrs	r2, r3, #24
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3303      	adds	r3, #3
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3304      	adds	r3, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0a1a      	lsrs	r2, r3, #8
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3305      	adds	r3, #5
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0c1a      	lsrs	r2, r3, #16
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3306      	adds	r3, #6
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0e1a      	lsrs	r2, r3, #24
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3307      	adds	r3, #7
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d108      	bne.n	80018de <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0220 	orr.w	r2, r2, #32
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	e007      	b.n	80018ee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0220 	orr.w	r2, r2, #32
 80018ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e006      	b.n	8001900 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
  }
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d002      	beq.n	800192a <HAL_CAN_ActivateNotification+0x1e>
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d109      	bne.n	800193e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6959      	ldr	r1, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e006      	b.n	800194c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d07c      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f97d 	bl	8001cba <HAL_CAN_TxMailbox0CompleteCallback>
 80019c0:	e016      	b.n	80019f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
 80019d4:	e00c      	b.n	80019f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	e002      	b.n	80019f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f983 	bl	8001cf6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d024      	beq.n	8001a44 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f95d 	bl	8001cce <HAL_CAN_TxMailbox1CompleteCallback>
 8001a14:	e016      	b.n	8001a44 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e00c      	b.n	8001a44 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e002      	b.n	8001a44 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f963 	bl	8001d0a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f93d 	bl	8001ce2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a68:	e016      	b.n	8001a98 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	e00c      	b.n	8001a98 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	e002      	b.n	8001a98 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f943 	bl	8001d1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00c      	beq.n	8001abc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f92a 	bl	8001d32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd9a 	bl	8000630 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00c      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2208      	movs	r2, #8
 8001b3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f90c 	bl	8001d5a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8f3 	bl	8001d46 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8f6 	bl	8001d6e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8ef 	bl	8001d82 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d06c      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03d      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d038      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c26:	2b30      	cmp	r3, #48	; 0x30
 8001c28:	d017      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x302>
 8001c2a:	2b30      	cmp	r3, #48	; 0x30
 8001c2c:	d804      	bhi.n	8001c38 <HAL_CAN_IRQHandler+0x2e0>
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d009      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x2ee>
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d00c      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c36:	e024      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001c38:	2b50      	cmp	r3, #80	; 0x50
 8001c3a:	d018      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x316>
 8001c3c:	2b60      	cmp	r3, #96	; 0x60
 8001c3e:	d01b      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x320>
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d00f      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001c44:	e01d      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c4e:	e018      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c58:	e013      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c62:	e00e      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c6c:	e009      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c76:	e004      	b.n	8001c82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2204      	movs	r2, #4
 8001c98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f872 	bl	8001d96 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00
 8001df0:	05fa0000 	.word	0x05fa0000

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e175      	b.n	80022dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8164 	bne.w	80022d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d00b      	beq.n	800202e <HAL_GPIO_Init+0x5e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002022:	2b11      	cmp	r3, #17
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b12      	cmp	r3, #18
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x100>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80be 	beq.w	80022d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_GPIO_Init+0x320>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a64      	ldr	r2, [pc, #400]	; (80022f0 <HAL_GPIO_Init+0x320>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <HAL_GPIO_Init+0x320>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002172:	4a60      	ldr	r2, [pc, #384]	; (80022f4 <HAL_GPIO_Init+0x324>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a57      	ldr	r2, [pc, #348]	; (80022f8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d037      	beq.n	800220e <HAL_GPIO_Init+0x23e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a56      	ldr	r2, [pc, #344]	; (80022fc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d031      	beq.n	800220a <HAL_GPIO_Init+0x23a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a55      	ldr	r2, [pc, #340]	; (8002300 <HAL_GPIO_Init+0x330>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <HAL_GPIO_Init+0x236>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a54      	ldr	r2, [pc, #336]	; (8002304 <HAL_GPIO_Init+0x334>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d025      	beq.n	8002202 <HAL_GPIO_Init+0x232>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_GPIO_Init+0x338>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <HAL_GPIO_Init+0x22e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_GPIO_Init+0x33c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x22a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_GPIO_Init+0x340>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x226>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_GPIO_Init+0x344>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x222>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	; (8002318 <HAL_GPIO_Init+0x348>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x21e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	; (800231c <HAL_GPIO_Init+0x34c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x21a>
 80021e6:	2309      	movs	r3, #9
 80021e8:	e012      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021ea:	230a      	movs	r3, #10
 80021ec:	e010      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021ee:	2308      	movs	r3, #8
 80021f0:	e00e      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00c      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021f6:	2306      	movs	r3, #6
 80021f8:	e00a      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021fa:	2305      	movs	r3, #5
 80021fc:	e008      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021fe:	2304      	movs	r3, #4
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x240>
 8002202:	2303      	movs	r3, #3
 8002204:	e004      	b.n	8002210 <HAL_GPIO_Init+0x240>
 8002206:	2302      	movs	r3, #2
 8002208:	e002      	b.n	8002210 <HAL_GPIO_Init+0x240>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_GPIO_Init+0x240>
 800220e:	2300      	movs	r3, #0
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f002 0203 	and.w	r2, r2, #3
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	4093      	lsls	r3, r2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002220:	4934      	ldr	r1, [pc, #208]	; (80022f4 <HAL_GPIO_Init+0x324>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_GPIO_Init+0x350>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002252:	4a33      	ldr	r2, [pc, #204]	; (8002320 <HAL_GPIO_Init+0x350>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_GPIO_Init+0x350>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_GPIO_Init+0x350>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_GPIO_Init+0x350>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_GPIO_Init+0x350>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_GPIO_Init+0x350>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_GPIO_Init+0x350>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	f67f ae86 	bls.w	8001ff0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3724      	adds	r7, #36	; 0x24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40021400 	.word	0x40021400
 8002310:	40021800 	.word	0x40021800
 8002314:	40021c00 	.word	0x40021c00
 8002318:	40022000 	.word	0x40022000
 800231c:	40022400 	.word	0x40022400
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_PWREx_EnableOverDrive+0x98>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_PWREx_EnableOverDrive+0x98>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_PWREx_EnableOverDrive+0x98>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002352:	f7fe fe5f 	bl	8001014 <HAL_GetTick>
 8002356:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002358:	e009      	b.n	800236e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800235a:	f7fe fe5b 	bl	8001014 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002368:	d901      	bls.n	800236e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e022      	b.n	80023b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d1ee      	bne.n	800235a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7fe fe44 	bl	8001014 <HAL_GetTick>
 800238c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800238e:	e009      	b.n	80023a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002390:	f7fe fe40 	bl	8001014 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239e:	d901      	bls.n	80023a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e007      	b.n	80023b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023b0:	d1ee      	bne.n	8002390 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e29b      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8087 	beq.w	80024f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e8:	4b96      	ldr	r3, [pc, #600]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f4:	4b93      	ldr	r3, [pc, #588]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x62>
 8002400:	4b90      	ldr	r3, [pc, #576]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240e:	4b8d      	ldr	r3, [pc, #564]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d06c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x130>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d168      	bne.n	80024f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e275      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x7a>
 8002430:	4b84      	ldr	r3, [pc, #528]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a83      	ldr	r2, [pc, #524]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e02e      	b.n	800249c <HAL_RCC_OscConfig+0xd8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x9c>
 8002446:	4b7f      	ldr	r3, [pc, #508]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7e      	ldr	r2, [pc, #504]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800244c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b7c      	ldr	r3, [pc, #496]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7b      	ldr	r2, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xd8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0xc0>
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a75      	ldr	r2, [pc, #468]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xd8>
 8002484:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b6c      	ldr	r3, [pc, #432]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6b      	ldr	r2, [pc, #428]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fdb6 	bl	8001014 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fdb2 	bl	8001014 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e229      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xe8>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fda2 	bl	8001014 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fd9e 	bl	8001014 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e215      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x110>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d069      	beq.n	80025d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002502:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x190>
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x17a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1e9      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	493d      	ldr	r1, [pc, #244]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e040      	b.n	80025d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b39      	ldr	r3, [pc, #228]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a38      	ldr	r2, [pc, #224]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fd54 	bl	8001014 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe fd50 	bl	8001014 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1c7      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4929      	ldr	r1, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
 80025a2:	e018      	b.n	80025d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fd30 	bl	8001014 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe fd2c 	bl	8001014 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1a3      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d038      	beq.n	8002654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fd0d 	bl	8001014 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fd09 	bl	8001014 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e180      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x23a>
 800261c:	e01a      	b.n	8002654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_RCC_OscConfig+0x280>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fcf3 	bl	8001014 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fcef 	bl	8001014 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d903      	bls.n	8002648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e166      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
 8002644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b92      	ldr	r3, [pc, #584]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a4 	beq.w	80027aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b8c      	ldr	r3, [pc, #560]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b89      	ldr	r3, [pc, #548]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a88      	ldr	r2, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b86      	ldr	r3, [pc, #536]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268a:	4b83      	ldr	r3, [pc, #524]	; (8002898 <HAL_RCC_OscConfig+0x4d4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002696:	4b80      	ldr	r3, [pc, #512]	; (8002898 <HAL_RCC_OscConfig+0x4d4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7f      	ldr	r2, [pc, #508]	; (8002898 <HAL_RCC_OscConfig+0x4d4>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fcb7 	bl	8001014 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe fcb3 	bl	8001014 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e12a      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026bc:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x4d4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x31a>
 80026d0:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a6f      	ldr	r2, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e02d      	b.n	800273a <HAL_RCC_OscConfig+0x376>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x33c>
 80026e6:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a67      	ldr	r2, [pc, #412]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e01c      	b.n	800273a <HAL_RCC_OscConfig+0x376>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d10c      	bne.n	8002722 <HAL_RCC_OscConfig+0x35e>
 8002708:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a61      	ldr	r2, [pc, #388]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	e00b      	b.n	800273a <HAL_RCC_OscConfig+0x376>
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d015      	beq.n	800276e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fc67 	bl	8001014 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fc63 	bl	8001014 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0d8      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ee      	beq.n	800274a <HAL_RCC_OscConfig+0x386>
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fc51 	bl	8001014 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fc4d 	bl	8001014 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0c2      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ee      	bne.n	8002776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80ae 	beq.w	8002910 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b4:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d06d      	beq.n	800289c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d14b      	bne.n	8002860 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a31      	ldr	r2, [pc, #196]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fc1e 	bl	8001014 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fc1a 	bl	8001014 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e091      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	491b      	ldr	r1, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fbec 	bl	8001014 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fbe8 	bl	8001014 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e05f      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x47c>
 800285e:	e057      	b.n	8002910 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fbd2 	bl	8001014 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fbce 	bl	8001014 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e045      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_OscConfig+0x4d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x4b0>
 8002892:	e03d      	b.n	8002910 <HAL_RCC_OscConfig+0x54c>
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <HAL_RCC_OscConfig+0x558>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d030      	beq.n	800290c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d129      	bne.n	800290c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d122      	bne.n	800290c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d119      	bne.n	800290c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d10f      	bne.n	800290c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0d0      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 020f 	bic.w	r2, r3, #15
 800294e:	4965      	ldr	r1, [pc, #404]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d040      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d115      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e073      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4936      	ldr	r1, [pc, #216]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe fafe 	bl	8001014 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fafa 	bl	8001014 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e053      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d210      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	4922      	ldr	r1, [pc, #136]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x1cc>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1d0>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fa5a 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08004800 	.word	0x08004800
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0e:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d007      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x32>
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x38>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 808d 	bne.w	8002c3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b26:	60bb      	str	r3, [r7, #8]
      break;
 8002b28:	e08c      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2a:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b2c:	60bb      	str	r3, [r7, #8]
      break;
 8002b2e:	e089      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b30:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b38:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b3a:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d023      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b46:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	ea03 0501 	and.w	r5, r3, r1
 8002b5c:	ea04 0602 	and.w	r6, r4, r2
 8002b60:	4a3d      	ldr	r2, [pc, #244]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b62:	fb02 f106 	mul.w	r1, r2, r6
 8002b66:	2200      	movs	r2, #0
 8002b68:	fb02 f205 	mul.w	r2, r2, r5
 8002b6c:	440a      	add	r2, r1
 8002b6e:	493a      	ldr	r1, [pc, #232]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b70:	fba5 0101 	umull	r0, r1, r5, r1
 8002b74:	1853      	adds	r3, r2, r1
 8002b76:	4619      	mov	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f04f 0400 	mov.w	r4, #0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4623      	mov	r3, r4
 8002b82:	f7fd fbad 	bl	80002e0 <__aeabi_uldivmod>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e049      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	ea03 0501 	and.w	r5, r3, r1
 8002ba4:	ea04 0602 	and.w	r6, r4, r2
 8002ba8:	4629      	mov	r1, r5
 8002baa:	4632      	mov	r2, r6
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	0154      	lsls	r4, r2, #5
 8002bb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bba:	014b      	lsls	r3, r1, #5
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	1b49      	subs	r1, r1, r5
 8002bc2:	eb62 0206 	sbc.w	r2, r2, r6
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	0194      	lsls	r4, r2, #6
 8002bd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bd4:	018b      	lsls	r3, r1, #6
 8002bd6:	1a5b      	subs	r3, r3, r1
 8002bd8:	eb64 0402 	sbc.w	r4, r4, r2
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	00e2      	lsls	r2, r4, #3
 8002be6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bea:	00d9      	lsls	r1, r3, #3
 8002bec:	460b      	mov	r3, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	195b      	adds	r3, r3, r5
 8002bf2:	eb44 0406 	adc.w	r4, r4, r6
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	02a2      	lsls	r2, r4, #10
 8002c00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c04:	0299      	lsls	r1, r3, #10
 8002c06:	460b      	mov	r3, r1
 8002c08:	4614      	mov	r4, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f04f 0400 	mov.w	r4, #0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	f7fd fb62 	bl	80002e0 <__aeabi_uldivmod>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	60bb      	str	r3, [r7, #8]
      break;
 8002c3c:	e002      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c40:	60bb      	str	r3, [r7, #8]
      break;
 8002c42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c44:	68bb      	ldr	r3, [r7, #8]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	017d7840 	.word	0x017d7840

08002c5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff0 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0a9b      	lsrs	r3, r3, #10
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4a03      	ldr	r2, [pc, #12]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	08004810 	.word	0x08004810

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffdc 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0b5b      	lsrs	r3, r3, #13
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08004810 	.word	0x08004810

08002cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cec:	4b69      	ldr	r3, [pc, #420]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a68      	ldr	r2, [pc, #416]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cf6:	6093      	str	r3, [r2, #8]
 8002cf8:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	4964      	ldr	r1, [pc, #400]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d017      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	4959      	ldr	r1, [pc, #356]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d017      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	494a      	ldr	r1, [pc, #296]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d78:	d101      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 808b 	beq.w	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6413      	str	r3, [r2, #64]	; 0x40
 8002db4:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dc0:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe f922 	bl	8001014 <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe f91e 	bl	8001014 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e38d      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d035      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d02e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d114      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f8e6 	bl	8001014 <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe f8e2 	bl	8001014 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e34f      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ee      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7a:	d111      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e8a:	400b      	ands	r3, r1
 8002e8c:	4901      	ldr	r1, [pc, #4]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
 8002e92:	e00b      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000
 8002e9c:	0ffffcff 	.word	0x0ffffcff
 8002ea0:	4bb3      	ldr	r3, [pc, #716]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4ab2      	ldr	r2, [pc, #712]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eaa:	6093      	str	r3, [r2, #8]
 8002eac:	4bb0      	ldr	r3, [pc, #704]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	49ad      	ldr	r1, [pc, #692]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d010      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eca:	4ba9      	ldr	r3, [pc, #676]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed0:	4aa7      	ldr	r2, [pc, #668]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002eda:	4ba5      	ldr	r3, [pc, #660]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002edc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	49a2      	ldr	r1, [pc, #648]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef8:	4b9d      	ldr	r3, [pc, #628]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f06:	499a      	ldr	r1, [pc, #616]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1a:	4b95      	ldr	r3, [pc, #596]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f28:	4991      	ldr	r1, [pc, #580]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4a:	4989      	ldr	r1, [pc, #548]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f5e:	4b84      	ldr	r3, [pc, #528]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4980      	ldr	r1, [pc, #512]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f80:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f023 0203 	bic.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4978      	ldr	r1, [pc, #480]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa2:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f023 020c 	bic.w	r2, r3, #12
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	496f      	ldr	r1, [pc, #444]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	4967      	ldr	r1, [pc, #412]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	495e      	ldr	r1, [pc, #376]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	4956      	ldr	r1, [pc, #344]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	494d      	ldr	r1, [pc, #308]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800304c:	4b48      	ldr	r3, [pc, #288]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	4945      	ldr	r1, [pc, #276]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800306e:	4b40      	ldr	r3, [pc, #256]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	493c      	ldr	r1, [pc, #240]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309e:	4934      	ldr	r1, [pc, #208]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d011      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c0:	492b      	ldr	r1, [pc, #172]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d0:	d101      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	491b      	ldr	r1, [pc, #108]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003124:	4912      	ldr	r1, [pc, #72]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003148:	4909      	ldr	r1, [pc, #36]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003162:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	e002      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	4985      	ldr	r1, [pc, #532]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003188:	4b80      	ldr	r3, [pc, #512]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800318a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003198:	497c      	ldr	r1, [pc, #496]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ae:	f040 80d6 	bne.w	800335e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031be:	f7fd ff29 	bl	8001014 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031c6:	f7fd ff25 	bl	8001014 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d901      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e194      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031d8:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d021      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031f8:	4b64      	ldr	r3, [pc, #400]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003206:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0e1b      	lsrs	r3, r3, #24
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	019a      	lsls	r2, r3, #6
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	071b      	lsls	r3, r3, #28
 800322c:	4957      	ldr	r1, [pc, #348]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003252:	2b00      	cmp	r3, #0
 8003254:	d02e      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325e:	d129      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003274:	0f1b      	lsrs	r3, r3, #28
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	019a      	lsls	r2, r3, #6
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	071b      	lsls	r3, r3, #28
 8003294:	493d      	ldr	r1, [pc, #244]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a2:	f023 021f 	bic.w	r2, r3, #31
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	3b01      	subs	r3, #1
 80032ac:	4937      	ldr	r1, [pc, #220]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01d      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c6:	0e1b      	lsrs	r3, r3, #24
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	0f1b      	lsrs	r3, r3, #28
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	019a      	lsls	r2, r3, #6
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	071b      	lsls	r3, r3, #28
 80032f4:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d011      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	019a      	lsls	r2, r3, #6
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	061b      	lsls	r3, r3, #24
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	071b      	lsls	r3, r3, #28
 8003324:	4919      	ldr	r1, [pc, #100]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fd fe6c 	bl	8001014 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003340:	f7fd fe68 	bl	8001014 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0d7      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 80cd 	bne.w	8003500 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003372:	f7fd fe4f 	bl	8001014 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800337a:	f7fd fe4b 	bl	8001014 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d903      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0ba      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800338c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003390:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339c:	d0ed      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d02e      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d12a      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033c6:	4b51      	ldr	r3, [pc, #324]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033d4:	4b4d      	ldr	r3, [pc, #308]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	0f1b      	lsrs	r3, r3, #28
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	019a      	lsls	r2, r3, #6
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	041b      	lsls	r3, r3, #16
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	061b      	lsls	r3, r3, #24
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	071b      	lsls	r3, r3, #28
 80033fa:	4944      	ldr	r1, [pc, #272]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003402:	4b42      	ldr	r3, [pc, #264]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	493d      	ldr	r1, [pc, #244]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d022      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003430:	d11d      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	0e1b      	lsrs	r3, r3, #24
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	0f1b      	lsrs	r3, r3, #28
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	019a      	lsls	r2, r3, #6
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	431a      	orrs	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	4929      	ldr	r1, [pc, #164]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d028      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	0e1b      	lsrs	r3, r3, #24
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	019a      	lsls	r2, r3, #6
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	4917      	ldr	r1, [pc, #92]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4911      	ldr	r1, [pc, #68]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0e      	ldr	r2, [pc, #56]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d8:	f7fd fd9c 	bl	8001014 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034e0:	f7fd fd98 	bl	8001014 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e007      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fe:	d1ef      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e040      	b.n	80035a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fbfe 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8be 	bl	80036d0 <UART_SetConfig>
 8003554:	4603      	mov	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e022      	b.n	80035a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fb5c 	bl	8003c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800357a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800358a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fbe3 	bl	8003d68 <UART_CheckIdleState>
 80035a2:	4603      	mov	r3, r0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d17f      	bne.n	80036c4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_UART_Transmit+0x24>
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e078      	b.n	80036c6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Transmit+0x36>
 80035de:	2302      	movs	r3, #2
 80035e0:	e071      	b.n	80036c6 <HAL_UART_Transmit+0x11a>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80035f6:	f7fd fd0d 	bl	8001014 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d108      	bne.n	8003628 <HAL_UART_Transmit+0x7c>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e003      	b.n	8003630 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003638:	e02c      	b.n	8003694 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fbd4 	bl	8003df2 <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e038      	b.n	80036c6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3302      	adds	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e007      	b.n	8003682 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1cc      	bne.n	800363a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2140      	movs	r1, #64	; 0x40
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fba1 	bl	8003df2 <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e005      	b.n	80036c6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4bb1      	ldr	r3, [pc, #708]	; (80039c4 <UART_SetConfig+0x2f4>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	6939      	ldr	r1, [r7, #16]
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a9f      	ldr	r2, [pc, #636]	; (80039c8 <UART_SetConfig+0x2f8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d121      	bne.n	8003794 <UART_SetConfig+0xc4>
 8003750:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <UART_SetConfig+0x2fc>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b03      	cmp	r3, #3
 800375c:	d816      	bhi.n	800378c <UART_SetConfig+0xbc>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <UART_SetConfig+0x94>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003775 	.word	0x08003775
 8003768:	08003781 	.word	0x08003781
 800376c:	0800377b 	.word	0x0800377b
 8003770:	08003787 	.word	0x08003787
 8003774:	2301      	movs	r3, #1
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e151      	b.n	8003a1e <UART_SetConfig+0x34e>
 800377a:	2302      	movs	r3, #2
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e14e      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003780:	2304      	movs	r3, #4
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e14b      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003786:	2308      	movs	r3, #8
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e148      	b.n	8003a1e <UART_SetConfig+0x34e>
 800378c:	2310      	movs	r3, #16
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	bf00      	nop
 8003792:	e144      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a8d      	ldr	r2, [pc, #564]	; (80039d0 <UART_SetConfig+0x300>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d134      	bne.n	8003808 <UART_SetConfig+0x138>
 800379e:	4b8b      	ldr	r3, [pc, #556]	; (80039cc <UART_SetConfig+0x2fc>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d829      	bhi.n	8003800 <UART_SetConfig+0x130>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0xe4>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037e9 	.word	0x080037e9
 80037b8:	08003801 	.word	0x08003801
 80037bc:	08003801 	.word	0x08003801
 80037c0:	08003801 	.word	0x08003801
 80037c4:	080037f5 	.word	0x080037f5
 80037c8:	08003801 	.word	0x08003801
 80037cc:	08003801 	.word	0x08003801
 80037d0:	08003801 	.word	0x08003801
 80037d4:	080037ef 	.word	0x080037ef
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003801 	.word	0x08003801
 80037e4:	080037fb 	.word	0x080037fb
 80037e8:	2300      	movs	r3, #0
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e117      	b.n	8003a1e <UART_SetConfig+0x34e>
 80037ee:	2302      	movs	r3, #2
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e114      	b.n	8003a1e <UART_SetConfig+0x34e>
 80037f4:	2304      	movs	r3, #4
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e111      	b.n	8003a1e <UART_SetConfig+0x34e>
 80037fa:	2308      	movs	r3, #8
 80037fc:	77fb      	strb	r3, [r7, #31]
 80037fe:	e10e      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003800:	2310      	movs	r3, #16
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	bf00      	nop
 8003806:	e10a      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a71      	ldr	r2, [pc, #452]	; (80039d4 <UART_SetConfig+0x304>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d120      	bne.n	8003854 <UART_SetConfig+0x184>
 8003812:	4b6e      	ldr	r3, [pc, #440]	; (80039cc <UART_SetConfig+0x2fc>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800381c:	2b10      	cmp	r3, #16
 800381e:	d00f      	beq.n	8003840 <UART_SetConfig+0x170>
 8003820:	2b10      	cmp	r3, #16
 8003822:	d802      	bhi.n	800382a <UART_SetConfig+0x15a>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <UART_SetConfig+0x164>
 8003828:	e010      	b.n	800384c <UART_SetConfig+0x17c>
 800382a:	2b20      	cmp	r3, #32
 800382c:	d005      	beq.n	800383a <UART_SetConfig+0x16a>
 800382e:	2b30      	cmp	r3, #48	; 0x30
 8003830:	d009      	beq.n	8003846 <UART_SetConfig+0x176>
 8003832:	e00b      	b.n	800384c <UART_SetConfig+0x17c>
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0f1      	b.n	8003a1e <UART_SetConfig+0x34e>
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e0ee      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003840:	2304      	movs	r3, #4
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0eb      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003846:	2308      	movs	r3, #8
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e0e8      	b.n	8003a1e <UART_SetConfig+0x34e>
 800384c:	2310      	movs	r3, #16
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	bf00      	nop
 8003852:	e0e4      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5f      	ldr	r2, [pc, #380]	; (80039d8 <UART_SetConfig+0x308>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d120      	bne.n	80038a0 <UART_SetConfig+0x1d0>
 800385e:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <UART_SetConfig+0x2fc>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d00f      	beq.n	800388c <UART_SetConfig+0x1bc>
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d802      	bhi.n	8003876 <UART_SetConfig+0x1a6>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <UART_SetConfig+0x1b0>
 8003874:	e010      	b.n	8003898 <UART_SetConfig+0x1c8>
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d005      	beq.n	8003886 <UART_SetConfig+0x1b6>
 800387a:	2bc0      	cmp	r3, #192	; 0xc0
 800387c:	d009      	beq.n	8003892 <UART_SetConfig+0x1c2>
 800387e:	e00b      	b.n	8003898 <UART_SetConfig+0x1c8>
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e0cb      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003886:	2302      	movs	r3, #2
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e0c8      	b.n	8003a1e <UART_SetConfig+0x34e>
 800388c:	2304      	movs	r3, #4
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e0c5      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003892:	2308      	movs	r3, #8
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e0c2      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003898:	2310      	movs	r3, #16
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	bf00      	nop
 800389e:	e0be      	b.n	8003a1e <UART_SetConfig+0x34e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a4d      	ldr	r2, [pc, #308]	; (80039dc <UART_SetConfig+0x30c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d124      	bne.n	80038f4 <UART_SetConfig+0x224>
 80038aa:	4b48      	ldr	r3, [pc, #288]	; (80039cc <UART_SetConfig+0x2fc>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d012      	beq.n	80038e0 <UART_SetConfig+0x210>
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d802      	bhi.n	80038c6 <UART_SetConfig+0x1f6>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <UART_SetConfig+0x204>
 80038c4:	e012      	b.n	80038ec <UART_SetConfig+0x21c>
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ca:	d006      	beq.n	80038da <UART_SetConfig+0x20a>
 80038cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d0:	d009      	beq.n	80038e6 <UART_SetConfig+0x216>
 80038d2:	e00b      	b.n	80038ec <UART_SetConfig+0x21c>
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e0a1      	b.n	8003a1e <UART_SetConfig+0x34e>
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e09e      	b.n	8003a1e <UART_SetConfig+0x34e>
 80038e0:	2304      	movs	r3, #4
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e09b      	b.n	8003a1e <UART_SetConfig+0x34e>
 80038e6:	2308      	movs	r3, #8
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e098      	b.n	8003a1e <UART_SetConfig+0x34e>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	bf00      	nop
 80038f2:	e094      	b.n	8003a1e <UART_SetConfig+0x34e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <UART_SetConfig+0x310>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d124      	bne.n	8003948 <UART_SetConfig+0x278>
 80038fe:	4b33      	ldr	r3, [pc, #204]	; (80039cc <UART_SetConfig+0x2fc>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390c:	d012      	beq.n	8003934 <UART_SetConfig+0x264>
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d802      	bhi.n	800391a <UART_SetConfig+0x24a>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <UART_SetConfig+0x258>
 8003918:	e012      	b.n	8003940 <UART_SetConfig+0x270>
 800391a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391e:	d006      	beq.n	800392e <UART_SetConfig+0x25e>
 8003920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003924:	d009      	beq.n	800393a <UART_SetConfig+0x26a>
 8003926:	e00b      	b.n	8003940 <UART_SetConfig+0x270>
 8003928:	2301      	movs	r3, #1
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e077      	b.n	8003a1e <UART_SetConfig+0x34e>
 800392e:	2302      	movs	r3, #2
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e074      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003934:	2304      	movs	r3, #4
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e071      	b.n	8003a1e <UART_SetConfig+0x34e>
 800393a:	2308      	movs	r3, #8
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e06e      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003940:	2310      	movs	r3, #16
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	bf00      	nop
 8003946:	e06a      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <UART_SetConfig+0x314>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d124      	bne.n	800399c <UART_SetConfig+0x2cc>
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <UART_SetConfig+0x2fc>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d012      	beq.n	8003988 <UART_SetConfig+0x2b8>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	d802      	bhi.n	800396e <UART_SetConfig+0x29e>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <UART_SetConfig+0x2ac>
 800396c:	e012      	b.n	8003994 <UART_SetConfig+0x2c4>
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003972:	d006      	beq.n	8003982 <UART_SetConfig+0x2b2>
 8003974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003978:	d009      	beq.n	800398e <UART_SetConfig+0x2be>
 800397a:	e00b      	b.n	8003994 <UART_SetConfig+0x2c4>
 800397c:	2300      	movs	r3, #0
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e04d      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003982:	2302      	movs	r3, #2
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e04a      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003988:	2304      	movs	r3, #4
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e047      	b.n	8003a1e <UART_SetConfig+0x34e>
 800398e:	2308      	movs	r3, #8
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e044      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003994:	2310      	movs	r3, #16
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	bf00      	nop
 800399a:	e040      	b.n	8003a1e <UART_SetConfig+0x34e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <UART_SetConfig+0x318>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d139      	bne.n	8003a1a <UART_SetConfig+0x34a>
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <UART_SetConfig+0x2fc>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b4:	d027      	beq.n	8003a06 <UART_SetConfig+0x336>
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ba:	d817      	bhi.n	80039ec <UART_SetConfig+0x31c>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01c      	beq.n	80039fa <UART_SetConfig+0x32a>
 80039c0:	e027      	b.n	8003a12 <UART_SetConfig+0x342>
 80039c2:	bf00      	nop
 80039c4:	efff69f3 	.word	0xefff69f3
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40004400 	.word	0x40004400
 80039d4:	40004800 	.word	0x40004800
 80039d8:	40004c00 	.word	0x40004c00
 80039dc:	40005000 	.word	0x40005000
 80039e0:	40011400 	.word	0x40011400
 80039e4:	40007800 	.word	0x40007800
 80039e8:	40007c00 	.word	0x40007c00
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	d006      	beq.n	8003a00 <UART_SetConfig+0x330>
 80039f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039f6:	d009      	beq.n	8003a0c <UART_SetConfig+0x33c>
 80039f8:	e00b      	b.n	8003a12 <UART_SetConfig+0x342>
 80039fa:	2300      	movs	r3, #0
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e00e      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003a00:	2302      	movs	r3, #2
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e00b      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003a06:	2304      	movs	r3, #4
 8003a08:	77fb      	strb	r3, [r7, #31]
 8003a0a:	e008      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e005      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003a12:	2310      	movs	r3, #16
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	bf00      	nop
 8003a18:	e001      	b.n	8003a1e <UART_SetConfig+0x34e>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d17f      	bne.n	8003b28 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003a28:	7ffb      	ldrb	r3, [r7, #31]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d85c      	bhi.n	8003ae8 <UART_SetConfig+0x418>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <UART_SetConfig+0x364>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a99 	.word	0x08003a99
 8003a40:	08003ae9 	.word	0x08003ae9
 8003a44:	08003ab1 	.word	0x08003ab1
 8003a48:	08003ae9 	.word	0x08003ae9
 8003a4c:	08003ae9 	.word	0x08003ae9
 8003a50:	08003ae9 	.word	0x08003ae9
 8003a54:	08003ad1 	.word	0x08003ad1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7ff f90c 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	005a      	lsls	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	61bb      	str	r3, [r7, #24]
        break;
 8003a76:	e03a      	b.n	8003aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a78:	f7ff f910 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003a7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	005a      	lsls	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	61bb      	str	r3, [r7, #24]
        break;
 8003a96:	e02a      	b.n	8003aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	085a      	lsrs	r2, r3, #1
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <UART_SetConfig+0x54c>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6852      	ldr	r2, [r2, #4]
 8003aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	61bb      	str	r3, [r7, #24]
        break;
 8003aae:	e01e      	b.n	8003aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab0:	f7ff f822 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8003ab4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	005a      	lsls	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	441a      	add	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	61bb      	str	r3, [r7, #24]
        break;
 8003ace:	e00e      	b.n	8003aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
        break;
 8003ae6:	e002      	b.n	8003aee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
        break;
 8003aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b0f      	cmp	r3, #15
 8003af2:	d916      	bls.n	8003b22 <UART_SetConfig+0x452>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d212      	bcs.n	8003b22 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f023 030f 	bic.w	r3, r3, #15
 8003b04:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	897b      	ldrh	r3, [r7, #10]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	897a      	ldrh	r2, [r7, #10]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e070      	b.n	8003c04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
 8003b26:	e06d      	b.n	8003c04 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003b28:	7ffb      	ldrb	r3, [r7, #31]
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d859      	bhi.n	8003be2 <UART_SetConfig+0x512>
 8003b2e:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <UART_SetConfig+0x464>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b77 	.word	0x08003b77
 8003b3c:	08003b95 	.word	0x08003b95
 8003b40:	08003be3 	.word	0x08003be3
 8003b44:	08003bad 	.word	0x08003bad
 8003b48:	08003be3 	.word	0x08003be3
 8003b4c:	08003be3 	.word	0x08003be3
 8003b50:	08003be3 	.word	0x08003be3
 8003b54:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7ff f88c 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	085a      	lsrs	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	61bb      	str	r3, [r7, #24]
        break;
 8003b74:	e038      	b.n	8003be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b76:	f7ff f891 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003b7a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	085a      	lsrs	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	61bb      	str	r3, [r7, #24]
        break;
 8003b92:	e029      	b.n	8003be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	085a      	lsrs	r2, r3, #1
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <UART_SetConfig+0x550>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6852      	ldr	r2, [r2, #4]
 8003ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
        break;
 8003baa:	e01d      	b.n	8003be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bac:	f7fe ffa4 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8003bb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	085a      	lsrs	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	61bb      	str	r3, [r7, #24]
        break;
 8003bc8:	e00e      	b.n	8003be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	61bb      	str	r3, [r7, #24]
        break;
 8003be0:	e002      	b.n	8003be8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
        break;
 8003be6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	d908      	bls.n	8003c00 <UART_SetConfig+0x530>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d204      	bcs.n	8003c00 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e001      	b.n	8003c04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	01e84800 	.word	0x01e84800
 8003c20:	00f42400 	.word	0x00f42400

08003c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d10a      	bne.n	8003d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d76:	f7fd f94d 	bl	8001014 <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d10e      	bne.n	8003da8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f82a 	bl	8003df2 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e020      	b.n	8003dea <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d10e      	bne.n	8003dd4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f814 	bl	8003df2 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e00a      	b.n	8003dea <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e02:	e05d      	b.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d059      	beq.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0c:	f7fd f902 	bl	8001014 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d302      	bcc.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d11b      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e042      	b.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d02b      	beq.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d123      	bne.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e00f      	b.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d092      	beq.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	; (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4e0d      	ldr	r6, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1ba4      	subs	r4, r4, r6
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2500      	movs	r5, #0
 8003f00:	42a5      	cmp	r5, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4e0b      	ldr	r6, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 fc26 	bl	8004758 <_init>
 8003f0c:	1ba4      	subs	r4, r4, r6
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2500      	movs	r5, #0
 8003f12:	42a5      	cmp	r5, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f1c:	4798      	blx	r3
 8003f1e:	3501      	adds	r5, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f26:	4798      	blx	r3
 8003f28:	3501      	adds	r5, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08004854 	.word	0x08004854
 8003f30:	08004854 	.word	0x08004854
 8003f34:	08004854 	.word	0x08004854
 8003f38:	08004858 	.word	0x08004858

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <siprintf>:
 8003f4c:	b40e      	push	{r1, r2, r3}
 8003f4e:	b500      	push	{lr}
 8003f50:	b09c      	sub	sp, #112	; 0x70
 8003f52:	ab1d      	add	r3, sp, #116	; 0x74
 8003f54:	9002      	str	r0, [sp, #8]
 8003f56:	9006      	str	r0, [sp, #24]
 8003f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f5c:	4809      	ldr	r0, [pc, #36]	; (8003f84 <siprintf+0x38>)
 8003f5e:	9107      	str	r1, [sp, #28]
 8003f60:	9104      	str	r1, [sp, #16]
 8003f62:	4909      	ldr	r1, [pc, #36]	; (8003f88 <siprintf+0x3c>)
 8003f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f68:	9105      	str	r1, [sp, #20]
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	a902      	add	r1, sp, #8
 8003f70:	f000 f866 	bl	8004040 <_svfiprintf_r>
 8003f74:	9b02      	ldr	r3, [sp, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	b01c      	add	sp, #112	; 0x70
 8003f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f80:	b003      	add	sp, #12
 8003f82:	4770      	bx	lr
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	ffff0208 	.word	0xffff0208

08003f8c <__ssputs_r>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	688e      	ldr	r6, [r1, #8]
 8003f92:	429e      	cmp	r6, r3
 8003f94:	4682      	mov	sl, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	4690      	mov	r8, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	d837      	bhi.n	800400e <__ssputs_r+0x82>
 8003f9e:	898a      	ldrh	r2, [r1, #12]
 8003fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fa4:	d031      	beq.n	800400a <__ssputs_r+0x7e>
 8003fa6:	6825      	ldr	r5, [r4, #0]
 8003fa8:	6909      	ldr	r1, [r1, #16]
 8003faa:	1a6f      	subs	r7, r5, r1
 8003fac:	6965      	ldr	r5, [r4, #20]
 8003fae:	2302      	movs	r3, #2
 8003fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fb8:	f109 0301 	add.w	r3, r9, #1
 8003fbc:	443b      	add	r3, r7
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	bf38      	it	cc
 8003fc2:	461d      	movcc	r5, r3
 8003fc4:	0553      	lsls	r3, r2, #21
 8003fc6:	d530      	bpl.n	800402a <__ssputs_r+0x9e>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	f000 fb2b 	bl	8004624 <_malloc_r>
 8003fce:	4606      	mov	r6, r0
 8003fd0:	b950      	cbnz	r0, 8003fe8 <__ssputs_r+0x5c>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	f8ca 3000 	str.w	r3, [sl]
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	463a      	mov	r2, r7
 8003fea:	6921      	ldr	r1, [r4, #16]
 8003fec:	f000 faa8 	bl	8004540 <memcpy>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	6126      	str	r6, [r4, #16]
 8003ffe:	6165      	str	r5, [r4, #20]
 8004000:	443e      	add	r6, r7
 8004002:	1bed      	subs	r5, r5, r7
 8004004:	6026      	str	r6, [r4, #0]
 8004006:	60a5      	str	r5, [r4, #8]
 8004008:	464e      	mov	r6, r9
 800400a:	454e      	cmp	r6, r9
 800400c:	d900      	bls.n	8004010 <__ssputs_r+0x84>
 800400e:	464e      	mov	r6, r9
 8004010:	4632      	mov	r2, r6
 8004012:	4641      	mov	r1, r8
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	f000 fa9e 	bl	8004556 <memmove>
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	1b9b      	subs	r3, r3, r6
 800401e:	60a3      	str	r3, [r4, #8]
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	441e      	add	r6, r3
 8004024:	6026      	str	r6, [r4, #0]
 8004026:	2000      	movs	r0, #0
 8004028:	e7dc      	b.n	8003fe4 <__ssputs_r+0x58>
 800402a:	462a      	mov	r2, r5
 800402c:	f000 fb54 	bl	80046d8 <_realloc_r>
 8004030:	4606      	mov	r6, r0
 8004032:	2800      	cmp	r0, #0
 8004034:	d1e2      	bne.n	8003ffc <__ssputs_r+0x70>
 8004036:	6921      	ldr	r1, [r4, #16]
 8004038:	4650      	mov	r0, sl
 800403a:	f000 faa5 	bl	8004588 <_free_r>
 800403e:	e7c8      	b.n	8003fd2 <__ssputs_r+0x46>

08004040 <_svfiprintf_r>:
 8004040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004044:	461d      	mov	r5, r3
 8004046:	898b      	ldrh	r3, [r1, #12]
 8004048:	061f      	lsls	r7, r3, #24
 800404a:	b09d      	sub	sp, #116	; 0x74
 800404c:	4680      	mov	r8, r0
 800404e:	460c      	mov	r4, r1
 8004050:	4616      	mov	r6, r2
 8004052:	d50f      	bpl.n	8004074 <_svfiprintf_r+0x34>
 8004054:	690b      	ldr	r3, [r1, #16]
 8004056:	b96b      	cbnz	r3, 8004074 <_svfiprintf_r+0x34>
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	f000 fae3 	bl	8004624 <_malloc_r>
 800405e:	6020      	str	r0, [r4, #0]
 8004060:	6120      	str	r0, [r4, #16]
 8004062:	b928      	cbnz	r0, 8004070 <_svfiprintf_r+0x30>
 8004064:	230c      	movs	r3, #12
 8004066:	f8c8 3000 	str.w	r3, [r8]
 800406a:	f04f 30ff 	mov.w	r0, #4294967295
 800406e:	e0c8      	b.n	8004202 <_svfiprintf_r+0x1c2>
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	6163      	str	r3, [r4, #20]
 8004074:	2300      	movs	r3, #0
 8004076:	9309      	str	r3, [sp, #36]	; 0x24
 8004078:	2320      	movs	r3, #32
 800407a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800407e:	2330      	movs	r3, #48	; 0x30
 8004080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004084:	9503      	str	r5, [sp, #12]
 8004086:	f04f 0b01 	mov.w	fp, #1
 800408a:	4637      	mov	r7, r6
 800408c:	463d      	mov	r5, r7
 800408e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004092:	b10b      	cbz	r3, 8004098 <_svfiprintf_r+0x58>
 8004094:	2b25      	cmp	r3, #37	; 0x25
 8004096:	d13e      	bne.n	8004116 <_svfiprintf_r+0xd6>
 8004098:	ebb7 0a06 	subs.w	sl, r7, r6
 800409c:	d00b      	beq.n	80040b6 <_svfiprintf_r+0x76>
 800409e:	4653      	mov	r3, sl
 80040a0:	4632      	mov	r2, r6
 80040a2:	4621      	mov	r1, r4
 80040a4:	4640      	mov	r0, r8
 80040a6:	f7ff ff71 	bl	8003f8c <__ssputs_r>
 80040aa:	3001      	adds	r0, #1
 80040ac:	f000 80a4 	beq.w	80041f8 <_svfiprintf_r+0x1b8>
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	4453      	add	r3, sl
 80040b4:	9309      	str	r3, [sp, #36]	; 0x24
 80040b6:	783b      	ldrb	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 809d 	beq.w	80041f8 <_svfiprintf_r+0x1b8>
 80040be:	2300      	movs	r3, #0
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	9307      	str	r3, [sp, #28]
 80040cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040d0:	931a      	str	r3, [sp, #104]	; 0x68
 80040d2:	462f      	mov	r7, r5
 80040d4:	2205      	movs	r2, #5
 80040d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040da:	4850      	ldr	r0, [pc, #320]	; (800421c <_svfiprintf_r+0x1dc>)
 80040dc:	f7fc f8b0 	bl	8000240 <memchr>
 80040e0:	9b04      	ldr	r3, [sp, #16]
 80040e2:	b9d0      	cbnz	r0, 800411a <_svfiprintf_r+0xda>
 80040e4:	06d9      	lsls	r1, r3, #27
 80040e6:	bf44      	itt	mi
 80040e8:	2220      	movmi	r2, #32
 80040ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ee:	071a      	lsls	r2, r3, #28
 80040f0:	bf44      	itt	mi
 80040f2:	222b      	movmi	r2, #43	; 0x2b
 80040f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040f8:	782a      	ldrb	r2, [r5, #0]
 80040fa:	2a2a      	cmp	r2, #42	; 0x2a
 80040fc:	d015      	beq.n	800412a <_svfiprintf_r+0xea>
 80040fe:	9a07      	ldr	r2, [sp, #28]
 8004100:	462f      	mov	r7, r5
 8004102:	2000      	movs	r0, #0
 8004104:	250a      	movs	r5, #10
 8004106:	4639      	mov	r1, r7
 8004108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410c:	3b30      	subs	r3, #48	; 0x30
 800410e:	2b09      	cmp	r3, #9
 8004110:	d94d      	bls.n	80041ae <_svfiprintf_r+0x16e>
 8004112:	b1b8      	cbz	r0, 8004144 <_svfiprintf_r+0x104>
 8004114:	e00f      	b.n	8004136 <_svfiprintf_r+0xf6>
 8004116:	462f      	mov	r7, r5
 8004118:	e7b8      	b.n	800408c <_svfiprintf_r+0x4c>
 800411a:	4a40      	ldr	r2, [pc, #256]	; (800421c <_svfiprintf_r+0x1dc>)
 800411c:	1a80      	subs	r0, r0, r2
 800411e:	fa0b f000 	lsl.w	r0, fp, r0
 8004122:	4318      	orrs	r0, r3
 8004124:	9004      	str	r0, [sp, #16]
 8004126:	463d      	mov	r5, r7
 8004128:	e7d3      	b.n	80040d2 <_svfiprintf_r+0x92>
 800412a:	9a03      	ldr	r2, [sp, #12]
 800412c:	1d11      	adds	r1, r2, #4
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	9103      	str	r1, [sp, #12]
 8004132:	2a00      	cmp	r2, #0
 8004134:	db01      	blt.n	800413a <_svfiprintf_r+0xfa>
 8004136:	9207      	str	r2, [sp, #28]
 8004138:	e004      	b.n	8004144 <_svfiprintf_r+0x104>
 800413a:	4252      	negs	r2, r2
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	9207      	str	r2, [sp, #28]
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	783b      	ldrb	r3, [r7, #0]
 8004146:	2b2e      	cmp	r3, #46	; 0x2e
 8004148:	d10c      	bne.n	8004164 <_svfiprintf_r+0x124>
 800414a:	787b      	ldrb	r3, [r7, #1]
 800414c:	2b2a      	cmp	r3, #42	; 0x2a
 800414e:	d133      	bne.n	80041b8 <_svfiprintf_r+0x178>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	1d1a      	adds	r2, r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	9203      	str	r2, [sp, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	bfb8      	it	lt
 800415c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004160:	3702      	adds	r7, #2
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	4d2e      	ldr	r5, [pc, #184]	; (8004220 <_svfiprintf_r+0x1e0>)
 8004166:	7839      	ldrb	r1, [r7, #0]
 8004168:	2203      	movs	r2, #3
 800416a:	4628      	mov	r0, r5
 800416c:	f7fc f868 	bl	8000240 <memchr>
 8004170:	b138      	cbz	r0, 8004182 <_svfiprintf_r+0x142>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	1b40      	subs	r0, r0, r5
 8004176:	fa03 f000 	lsl.w	r0, r3, r0
 800417a:	9b04      	ldr	r3, [sp, #16]
 800417c:	4303      	orrs	r3, r0
 800417e:	3701      	adds	r7, #1
 8004180:	9304      	str	r3, [sp, #16]
 8004182:	7839      	ldrb	r1, [r7, #0]
 8004184:	4827      	ldr	r0, [pc, #156]	; (8004224 <_svfiprintf_r+0x1e4>)
 8004186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800418a:	2206      	movs	r2, #6
 800418c:	1c7e      	adds	r6, r7, #1
 800418e:	f7fc f857 	bl	8000240 <memchr>
 8004192:	2800      	cmp	r0, #0
 8004194:	d038      	beq.n	8004208 <_svfiprintf_r+0x1c8>
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <_svfiprintf_r+0x1e8>)
 8004198:	bb13      	cbnz	r3, 80041e0 <_svfiprintf_r+0x1a0>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	3307      	adds	r3, #7
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	3308      	adds	r3, #8
 80041a4:	9303      	str	r3, [sp, #12]
 80041a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a8:	444b      	add	r3, r9
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	e76d      	b.n	800408a <_svfiprintf_r+0x4a>
 80041ae:	fb05 3202 	mla	r2, r5, r2, r3
 80041b2:	2001      	movs	r0, #1
 80041b4:	460f      	mov	r7, r1
 80041b6:	e7a6      	b.n	8004106 <_svfiprintf_r+0xc6>
 80041b8:	2300      	movs	r3, #0
 80041ba:	3701      	adds	r7, #1
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	4619      	mov	r1, r3
 80041c0:	250a      	movs	r5, #10
 80041c2:	4638      	mov	r0, r7
 80041c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c8:	3a30      	subs	r2, #48	; 0x30
 80041ca:	2a09      	cmp	r2, #9
 80041cc:	d903      	bls.n	80041d6 <_svfiprintf_r+0x196>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c8      	beq.n	8004164 <_svfiprintf_r+0x124>
 80041d2:	9105      	str	r1, [sp, #20]
 80041d4:	e7c6      	b.n	8004164 <_svfiprintf_r+0x124>
 80041d6:	fb05 2101 	mla	r1, r5, r1, r2
 80041da:	2301      	movs	r3, #1
 80041dc:	4607      	mov	r7, r0
 80041de:	e7f0      	b.n	80041c2 <_svfiprintf_r+0x182>
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4622      	mov	r2, r4
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <_svfiprintf_r+0x1ec>)
 80041e8:	a904      	add	r1, sp, #16
 80041ea:	4640      	mov	r0, r8
 80041ec:	f3af 8000 	nop.w
 80041f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041f4:	4681      	mov	r9, r0
 80041f6:	d1d6      	bne.n	80041a6 <_svfiprintf_r+0x166>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	065b      	lsls	r3, r3, #25
 80041fc:	f53f af35 	bmi.w	800406a <_svfiprintf_r+0x2a>
 8004200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004202:	b01d      	add	sp, #116	; 0x74
 8004204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004208:	ab03      	add	r3, sp, #12
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4622      	mov	r2, r4
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <_svfiprintf_r+0x1ec>)
 8004210:	a904      	add	r1, sp, #16
 8004212:	4640      	mov	r0, r8
 8004214:	f000 f882 	bl	800431c <_printf_i>
 8004218:	e7ea      	b.n	80041f0 <_svfiprintf_r+0x1b0>
 800421a:	bf00      	nop
 800421c:	08004818 	.word	0x08004818
 8004220:	0800481e 	.word	0x0800481e
 8004224:	08004822 	.word	0x08004822
 8004228:	00000000 	.word	0x00000000
 800422c:	08003f8d 	.word	0x08003f8d

08004230 <_printf_common>:
 8004230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	4691      	mov	r9, r2
 8004236:	461f      	mov	r7, r3
 8004238:	688a      	ldr	r2, [r1, #8]
 800423a:	690b      	ldr	r3, [r1, #16]
 800423c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004240:	4293      	cmp	r3, r2
 8004242:	bfb8      	it	lt
 8004244:	4613      	movlt	r3, r2
 8004246:	f8c9 3000 	str.w	r3, [r9]
 800424a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800424e:	4606      	mov	r6, r0
 8004250:	460c      	mov	r4, r1
 8004252:	b112      	cbz	r2, 800425a <_printf_common+0x2a>
 8004254:	3301      	adds	r3, #1
 8004256:	f8c9 3000 	str.w	r3, [r9]
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	0699      	lsls	r1, r3, #26
 800425e:	bf42      	ittt	mi
 8004260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004264:	3302      	addmi	r3, #2
 8004266:	f8c9 3000 	strmi.w	r3, [r9]
 800426a:	6825      	ldr	r5, [r4, #0]
 800426c:	f015 0506 	ands.w	r5, r5, #6
 8004270:	d107      	bne.n	8004282 <_printf_common+0x52>
 8004272:	f104 0a19 	add.w	sl, r4, #25
 8004276:	68e3      	ldr	r3, [r4, #12]
 8004278:	f8d9 2000 	ldr.w	r2, [r9]
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	42ab      	cmp	r3, r5
 8004280:	dc28      	bgt.n	80042d4 <_printf_common+0xa4>
 8004282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	3300      	adds	r3, #0
 800428a:	bf18      	it	ne
 800428c:	2301      	movne	r3, #1
 800428e:	0692      	lsls	r2, r2, #26
 8004290:	d42d      	bmi.n	80042ee <_printf_common+0xbe>
 8004292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004296:	4639      	mov	r1, r7
 8004298:	4630      	mov	r0, r6
 800429a:	47c0      	blx	r8
 800429c:	3001      	adds	r0, #1
 800429e:	d020      	beq.n	80042e2 <_printf_common+0xb2>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	68e5      	ldr	r5, [r4, #12]
 80042a4:	f8d9 2000 	ldr.w	r2, [r9]
 80042a8:	f003 0306 	and.w	r3, r3, #6
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	bf08      	it	eq
 80042b0:	1aad      	subeq	r5, r5, r2
 80042b2:	68a3      	ldr	r3, [r4, #8]
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	bf0c      	ite	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	2500      	movne	r5, #0
 80042be:	4293      	cmp	r3, r2
 80042c0:	bfc4      	itt	gt
 80042c2:	1a9b      	subgt	r3, r3, r2
 80042c4:	18ed      	addgt	r5, r5, r3
 80042c6:	f04f 0900 	mov.w	r9, #0
 80042ca:	341a      	adds	r4, #26
 80042cc:	454d      	cmp	r5, r9
 80042ce:	d11a      	bne.n	8004306 <_printf_common+0xd6>
 80042d0:	2000      	movs	r0, #0
 80042d2:	e008      	b.n	80042e6 <_printf_common+0xb6>
 80042d4:	2301      	movs	r3, #1
 80042d6:	4652      	mov	r2, sl
 80042d8:	4639      	mov	r1, r7
 80042da:	4630      	mov	r0, r6
 80042dc:	47c0      	blx	r8
 80042de:	3001      	adds	r0, #1
 80042e0:	d103      	bne.n	80042ea <_printf_common+0xba>
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295
 80042e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ea:	3501      	adds	r5, #1
 80042ec:	e7c3      	b.n	8004276 <_printf_common+0x46>
 80042ee:	18e1      	adds	r1, r4, r3
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	2030      	movs	r0, #48	; 0x30
 80042f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f8:	4422      	add	r2, r4
 80042fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004302:	3302      	adds	r3, #2
 8004304:	e7c5      	b.n	8004292 <_printf_common+0x62>
 8004306:	2301      	movs	r3, #1
 8004308:	4622      	mov	r2, r4
 800430a:	4639      	mov	r1, r7
 800430c:	4630      	mov	r0, r6
 800430e:	47c0      	blx	r8
 8004310:	3001      	adds	r0, #1
 8004312:	d0e6      	beq.n	80042e2 <_printf_common+0xb2>
 8004314:	f109 0901 	add.w	r9, r9, #1
 8004318:	e7d8      	b.n	80042cc <_printf_common+0x9c>
	...

0800431c <_printf_i>:
 800431c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004324:	460c      	mov	r4, r1
 8004326:	7e09      	ldrb	r1, [r1, #24]
 8004328:	b085      	sub	sp, #20
 800432a:	296e      	cmp	r1, #110	; 0x6e
 800432c:	4617      	mov	r7, r2
 800432e:	4606      	mov	r6, r0
 8004330:	4698      	mov	r8, r3
 8004332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004334:	f000 80b3 	beq.w	800449e <_printf_i+0x182>
 8004338:	d822      	bhi.n	8004380 <_printf_i+0x64>
 800433a:	2963      	cmp	r1, #99	; 0x63
 800433c:	d036      	beq.n	80043ac <_printf_i+0x90>
 800433e:	d80a      	bhi.n	8004356 <_printf_i+0x3a>
 8004340:	2900      	cmp	r1, #0
 8004342:	f000 80b9 	beq.w	80044b8 <_printf_i+0x19c>
 8004346:	2958      	cmp	r1, #88	; 0x58
 8004348:	f000 8083 	beq.w	8004452 <_printf_i+0x136>
 800434c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004354:	e032      	b.n	80043bc <_printf_i+0xa0>
 8004356:	2964      	cmp	r1, #100	; 0x64
 8004358:	d001      	beq.n	800435e <_printf_i+0x42>
 800435a:	2969      	cmp	r1, #105	; 0x69
 800435c:	d1f6      	bne.n	800434c <_printf_i+0x30>
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	0605      	lsls	r5, r0, #24
 8004364:	f103 0104 	add.w	r1, r3, #4
 8004368:	d52a      	bpl.n	80043c0 <_printf_i+0xa4>
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da03      	bge.n	800437a <_printf_i+0x5e>
 8004372:	222d      	movs	r2, #45	; 0x2d
 8004374:	425b      	negs	r3, r3
 8004376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800437a:	486f      	ldr	r0, [pc, #444]	; (8004538 <_printf_i+0x21c>)
 800437c:	220a      	movs	r2, #10
 800437e:	e039      	b.n	80043f4 <_printf_i+0xd8>
 8004380:	2973      	cmp	r1, #115	; 0x73
 8004382:	f000 809d 	beq.w	80044c0 <_printf_i+0x1a4>
 8004386:	d808      	bhi.n	800439a <_printf_i+0x7e>
 8004388:	296f      	cmp	r1, #111	; 0x6f
 800438a:	d020      	beq.n	80043ce <_printf_i+0xb2>
 800438c:	2970      	cmp	r1, #112	; 0x70
 800438e:	d1dd      	bne.n	800434c <_printf_i+0x30>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	e003      	b.n	80043a2 <_printf_i+0x86>
 800439a:	2975      	cmp	r1, #117	; 0x75
 800439c:	d017      	beq.n	80043ce <_printf_i+0xb2>
 800439e:	2978      	cmp	r1, #120	; 0x78
 80043a0:	d1d4      	bne.n	800434c <_printf_i+0x30>
 80043a2:	2378      	movs	r3, #120	; 0x78
 80043a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043a8:	4864      	ldr	r0, [pc, #400]	; (800453c <_printf_i+0x220>)
 80043aa:	e055      	b.n	8004458 <_printf_i+0x13c>
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	1d19      	adds	r1, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6011      	str	r1, [r2, #0]
 80043b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e08c      	b.n	80044da <_printf_i+0x1be>
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6011      	str	r1, [r2, #0]
 80043c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c8:	bf18      	it	ne
 80043ca:	b21b      	sxthne	r3, r3
 80043cc:	e7cf      	b.n	800436e <_printf_i+0x52>
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	1d18      	adds	r0, r3, #4
 80043d4:	6010      	str	r0, [r2, #0]
 80043d6:	0628      	lsls	r0, r5, #24
 80043d8:	d501      	bpl.n	80043de <_printf_i+0xc2>
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	e002      	b.n	80043e4 <_printf_i+0xc8>
 80043de:	0668      	lsls	r0, r5, #25
 80043e0:	d5fb      	bpl.n	80043da <_printf_i+0xbe>
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	4854      	ldr	r0, [pc, #336]	; (8004538 <_printf_i+0x21c>)
 80043e6:	296f      	cmp	r1, #111	; 0x6f
 80043e8:	bf14      	ite	ne
 80043ea:	220a      	movne	r2, #10
 80043ec:	2208      	moveq	r2, #8
 80043ee:	2100      	movs	r1, #0
 80043f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043f4:	6865      	ldr	r5, [r4, #4]
 80043f6:	60a5      	str	r5, [r4, #8]
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	f2c0 8095 	blt.w	8004528 <_printf_i+0x20c>
 80043fe:	6821      	ldr	r1, [r4, #0]
 8004400:	f021 0104 	bic.w	r1, r1, #4
 8004404:	6021      	str	r1, [r4, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d13d      	bne.n	8004486 <_printf_i+0x16a>
 800440a:	2d00      	cmp	r5, #0
 800440c:	f040 808e 	bne.w	800452c <_printf_i+0x210>
 8004410:	4665      	mov	r5, ip
 8004412:	2a08      	cmp	r2, #8
 8004414:	d10b      	bne.n	800442e <_printf_i+0x112>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	07db      	lsls	r3, r3, #31
 800441a:	d508      	bpl.n	800442e <_printf_i+0x112>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	6862      	ldr	r2, [r4, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	bfde      	ittt	le
 8004424:	2330      	movle	r3, #48	; 0x30
 8004426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800442a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800442e:	ebac 0305 	sub.w	r3, ip, r5
 8004432:	6123      	str	r3, [r4, #16]
 8004434:	f8cd 8000 	str.w	r8, [sp]
 8004438:	463b      	mov	r3, r7
 800443a:	aa03      	add	r2, sp, #12
 800443c:	4621      	mov	r1, r4
 800443e:	4630      	mov	r0, r6
 8004440:	f7ff fef6 	bl	8004230 <_printf_common>
 8004444:	3001      	adds	r0, #1
 8004446:	d14d      	bne.n	80044e4 <_printf_i+0x1c8>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	b005      	add	sp, #20
 800444e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004452:	4839      	ldr	r0, [pc, #228]	; (8004538 <_printf_i+0x21c>)
 8004454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	1d1d      	adds	r5, r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6015      	str	r5, [r2, #0]
 8004462:	060a      	lsls	r2, r1, #24
 8004464:	d50b      	bpl.n	800447e <_printf_i+0x162>
 8004466:	07ca      	lsls	r2, r1, #31
 8004468:	bf44      	itt	mi
 800446a:	f041 0120 	orrmi.w	r1, r1, #32
 800446e:	6021      	strmi	r1, [r4, #0]
 8004470:	b91b      	cbnz	r3, 800447a <_printf_i+0x15e>
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	f022 0220 	bic.w	r2, r2, #32
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	2210      	movs	r2, #16
 800447c:	e7b7      	b.n	80043ee <_printf_i+0xd2>
 800447e:	064d      	lsls	r5, r1, #25
 8004480:	bf48      	it	mi
 8004482:	b29b      	uxthmi	r3, r3
 8004484:	e7ef      	b.n	8004466 <_printf_i+0x14a>
 8004486:	4665      	mov	r5, ip
 8004488:	fbb3 f1f2 	udiv	r1, r3, r2
 800448c:	fb02 3311 	mls	r3, r2, r1, r3
 8004490:	5cc3      	ldrb	r3, [r0, r3]
 8004492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004496:	460b      	mov	r3, r1
 8004498:	2900      	cmp	r1, #0
 800449a:	d1f5      	bne.n	8004488 <_printf_i+0x16c>
 800449c:	e7b9      	b.n	8004412 <_printf_i+0xf6>
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	6961      	ldr	r1, [r4, #20]
 80044a4:	1d18      	adds	r0, r3, #4
 80044a6:	6010      	str	r0, [r2, #0]
 80044a8:	0628      	lsls	r0, r5, #24
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	d501      	bpl.n	80044b2 <_printf_i+0x196>
 80044ae:	6019      	str	r1, [r3, #0]
 80044b0:	e002      	b.n	80044b8 <_printf_i+0x19c>
 80044b2:	066a      	lsls	r2, r5, #25
 80044b4:	d5fb      	bpl.n	80044ae <_printf_i+0x192>
 80044b6:	8019      	strh	r1, [r3, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	6123      	str	r3, [r4, #16]
 80044bc:	4665      	mov	r5, ip
 80044be:	e7b9      	b.n	8004434 <_printf_i+0x118>
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	1d19      	adds	r1, r3, #4
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	681d      	ldr	r5, [r3, #0]
 80044c8:	6862      	ldr	r2, [r4, #4]
 80044ca:	2100      	movs	r1, #0
 80044cc:	4628      	mov	r0, r5
 80044ce:	f7fb feb7 	bl	8000240 <memchr>
 80044d2:	b108      	cbz	r0, 80044d8 <_printf_i+0x1bc>
 80044d4:	1b40      	subs	r0, r0, r5
 80044d6:	6060      	str	r0, [r4, #4]
 80044d8:	6863      	ldr	r3, [r4, #4]
 80044da:	6123      	str	r3, [r4, #16]
 80044dc:	2300      	movs	r3, #0
 80044de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e2:	e7a7      	b.n	8004434 <_printf_i+0x118>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4639      	mov	r1, r7
 80044ea:	4630      	mov	r0, r6
 80044ec:	47c0      	blx	r8
 80044ee:	3001      	adds	r0, #1
 80044f0:	d0aa      	beq.n	8004448 <_printf_i+0x12c>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	079b      	lsls	r3, r3, #30
 80044f6:	d413      	bmi.n	8004520 <_printf_i+0x204>
 80044f8:	68e0      	ldr	r0, [r4, #12]
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	4298      	cmp	r0, r3
 80044fe:	bfb8      	it	lt
 8004500:	4618      	movlt	r0, r3
 8004502:	e7a3      	b.n	800444c <_printf_i+0x130>
 8004504:	2301      	movs	r3, #1
 8004506:	464a      	mov	r2, r9
 8004508:	4639      	mov	r1, r7
 800450a:	4630      	mov	r0, r6
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d09a      	beq.n	8004448 <_printf_i+0x12c>
 8004512:	3501      	adds	r5, #1
 8004514:	68e3      	ldr	r3, [r4, #12]
 8004516:	9a03      	ldr	r2, [sp, #12]
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	42ab      	cmp	r3, r5
 800451c:	dcf2      	bgt.n	8004504 <_printf_i+0x1e8>
 800451e:	e7eb      	b.n	80044f8 <_printf_i+0x1dc>
 8004520:	2500      	movs	r5, #0
 8004522:	f104 0919 	add.w	r9, r4, #25
 8004526:	e7f5      	b.n	8004514 <_printf_i+0x1f8>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ac      	bne.n	8004486 <_printf_i+0x16a>
 800452c:	7803      	ldrb	r3, [r0, #0]
 800452e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004536:	e76c      	b.n	8004412 <_printf_i+0xf6>
 8004538:	08004829 	.word	0x08004829
 800453c:	0800483a 	.word	0x0800483a

08004540 <memcpy>:
 8004540:	b510      	push	{r4, lr}
 8004542:	1e43      	subs	r3, r0, #1
 8004544:	440a      	add	r2, r1
 8004546:	4291      	cmp	r1, r2
 8004548:	d100      	bne.n	800454c <memcpy+0xc>
 800454a:	bd10      	pop	{r4, pc}
 800454c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004554:	e7f7      	b.n	8004546 <memcpy+0x6>

08004556 <memmove>:
 8004556:	4288      	cmp	r0, r1
 8004558:	b510      	push	{r4, lr}
 800455a:	eb01 0302 	add.w	r3, r1, r2
 800455e:	d807      	bhi.n	8004570 <memmove+0x1a>
 8004560:	1e42      	subs	r2, r0, #1
 8004562:	4299      	cmp	r1, r3
 8004564:	d00a      	beq.n	800457c <memmove+0x26>
 8004566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800456e:	e7f8      	b.n	8004562 <memmove+0xc>
 8004570:	4283      	cmp	r3, r0
 8004572:	d9f5      	bls.n	8004560 <memmove+0xa>
 8004574:	1881      	adds	r1, r0, r2
 8004576:	1ad2      	subs	r2, r2, r3
 8004578:	42d3      	cmn	r3, r2
 800457a:	d100      	bne.n	800457e <memmove+0x28>
 800457c:	bd10      	pop	{r4, pc}
 800457e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004582:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004586:	e7f7      	b.n	8004578 <memmove+0x22>

08004588 <_free_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4605      	mov	r5, r0
 800458c:	2900      	cmp	r1, #0
 800458e:	d045      	beq.n	800461c <_free_r+0x94>
 8004590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004594:	1f0c      	subs	r4, r1, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	bfb8      	it	lt
 800459a:	18e4      	addlt	r4, r4, r3
 800459c:	f000 f8d2 	bl	8004744 <__malloc_lock>
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <_free_r+0x98>)
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	4610      	mov	r0, r2
 80045a6:	b933      	cbnz	r3, 80045b6 <_free_r+0x2e>
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	6014      	str	r4, [r2, #0]
 80045ac:	4628      	mov	r0, r5
 80045ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045b2:	f000 b8c8 	b.w	8004746 <__malloc_unlock>
 80045b6:	42a3      	cmp	r3, r4
 80045b8:	d90c      	bls.n	80045d4 <_free_r+0x4c>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	1862      	adds	r2, r4, r1
 80045be:	4293      	cmp	r3, r2
 80045c0:	bf04      	itt	eq
 80045c2:	681a      	ldreq	r2, [r3, #0]
 80045c4:	685b      	ldreq	r3, [r3, #4]
 80045c6:	6063      	str	r3, [r4, #4]
 80045c8:	bf04      	itt	eq
 80045ca:	1852      	addeq	r2, r2, r1
 80045cc:	6022      	streq	r2, [r4, #0]
 80045ce:	6004      	str	r4, [r0, #0]
 80045d0:	e7ec      	b.n	80045ac <_free_r+0x24>
 80045d2:	4613      	mov	r3, r2
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	b10a      	cbz	r2, 80045dc <_free_r+0x54>
 80045d8:	42a2      	cmp	r2, r4
 80045da:	d9fa      	bls.n	80045d2 <_free_r+0x4a>
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	1858      	adds	r0, r3, r1
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d10b      	bne.n	80045fc <_free_r+0x74>
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	4401      	add	r1, r0
 80045e8:	1858      	adds	r0, r3, r1
 80045ea:	4282      	cmp	r2, r0
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	d1dd      	bne.n	80045ac <_free_r+0x24>
 80045f0:	6810      	ldr	r0, [r2, #0]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	4401      	add	r1, r0
 80045f8:	6019      	str	r1, [r3, #0]
 80045fa:	e7d7      	b.n	80045ac <_free_r+0x24>
 80045fc:	d902      	bls.n	8004604 <_free_r+0x7c>
 80045fe:	230c      	movs	r3, #12
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	e7d3      	b.n	80045ac <_free_r+0x24>
 8004604:	6820      	ldr	r0, [r4, #0]
 8004606:	1821      	adds	r1, r4, r0
 8004608:	428a      	cmp	r2, r1
 800460a:	bf04      	itt	eq
 800460c:	6811      	ldreq	r1, [r2, #0]
 800460e:	6852      	ldreq	r2, [r2, #4]
 8004610:	6062      	str	r2, [r4, #4]
 8004612:	bf04      	itt	eq
 8004614:	1809      	addeq	r1, r1, r0
 8004616:	6021      	streq	r1, [r4, #0]
 8004618:	605c      	str	r4, [r3, #4]
 800461a:	e7c7      	b.n	80045ac <_free_r+0x24>
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	20000094 	.word	0x20000094

08004624 <_malloc_r>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	1ccd      	adds	r5, r1, #3
 8004628:	f025 0503 	bic.w	r5, r5, #3
 800462c:	3508      	adds	r5, #8
 800462e:	2d0c      	cmp	r5, #12
 8004630:	bf38      	it	cc
 8004632:	250c      	movcc	r5, #12
 8004634:	2d00      	cmp	r5, #0
 8004636:	4606      	mov	r6, r0
 8004638:	db01      	blt.n	800463e <_malloc_r+0x1a>
 800463a:	42a9      	cmp	r1, r5
 800463c:	d903      	bls.n	8004646 <_malloc_r+0x22>
 800463e:	230c      	movs	r3, #12
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	2000      	movs	r0, #0
 8004644:	bd70      	pop	{r4, r5, r6, pc}
 8004646:	f000 f87d 	bl	8004744 <__malloc_lock>
 800464a:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <_malloc_r+0xac>)
 800464c:	6814      	ldr	r4, [r2, #0]
 800464e:	4621      	mov	r1, r4
 8004650:	b991      	cbnz	r1, 8004678 <_malloc_r+0x54>
 8004652:	4c20      	ldr	r4, [pc, #128]	; (80046d4 <_malloc_r+0xb0>)
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	b91b      	cbnz	r3, 8004660 <_malloc_r+0x3c>
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f863 	bl	8004724 <_sbrk_r>
 800465e:	6020      	str	r0, [r4, #0]
 8004660:	4629      	mov	r1, r5
 8004662:	4630      	mov	r0, r6
 8004664:	f000 f85e 	bl	8004724 <_sbrk_r>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d124      	bne.n	80046b6 <_malloc_r+0x92>
 800466c:	230c      	movs	r3, #12
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	4630      	mov	r0, r6
 8004672:	f000 f868 	bl	8004746 <__malloc_unlock>
 8004676:	e7e4      	b.n	8004642 <_malloc_r+0x1e>
 8004678:	680b      	ldr	r3, [r1, #0]
 800467a:	1b5b      	subs	r3, r3, r5
 800467c:	d418      	bmi.n	80046b0 <_malloc_r+0x8c>
 800467e:	2b0b      	cmp	r3, #11
 8004680:	d90f      	bls.n	80046a2 <_malloc_r+0x7e>
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	50cd      	str	r5, [r1, r3]
 8004686:	18cc      	adds	r4, r1, r3
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f85c 	bl	8004746 <__malloc_unlock>
 800468e:	f104 000b 	add.w	r0, r4, #11
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	f020 0007 	bic.w	r0, r0, #7
 8004698:	1ac3      	subs	r3, r0, r3
 800469a:	d0d3      	beq.n	8004644 <_malloc_r+0x20>
 800469c:	425a      	negs	r2, r3
 800469e:	50e2      	str	r2, [r4, r3]
 80046a0:	e7d0      	b.n	8004644 <_malloc_r+0x20>
 80046a2:	428c      	cmp	r4, r1
 80046a4:	684b      	ldr	r3, [r1, #4]
 80046a6:	bf16      	itet	ne
 80046a8:	6063      	strne	r3, [r4, #4]
 80046aa:	6013      	streq	r3, [r2, #0]
 80046ac:	460c      	movne	r4, r1
 80046ae:	e7eb      	b.n	8004688 <_malloc_r+0x64>
 80046b0:	460c      	mov	r4, r1
 80046b2:	6849      	ldr	r1, [r1, #4]
 80046b4:	e7cc      	b.n	8004650 <_malloc_r+0x2c>
 80046b6:	1cc4      	adds	r4, r0, #3
 80046b8:	f024 0403 	bic.w	r4, r4, #3
 80046bc:	42a0      	cmp	r0, r4
 80046be:	d005      	beq.n	80046cc <_malloc_r+0xa8>
 80046c0:	1a21      	subs	r1, r4, r0
 80046c2:	4630      	mov	r0, r6
 80046c4:	f000 f82e 	bl	8004724 <_sbrk_r>
 80046c8:	3001      	adds	r0, #1
 80046ca:	d0cf      	beq.n	800466c <_malloc_r+0x48>
 80046cc:	6025      	str	r5, [r4, #0]
 80046ce:	e7db      	b.n	8004688 <_malloc_r+0x64>
 80046d0:	20000094 	.word	0x20000094
 80046d4:	20000098 	.word	0x20000098

080046d8 <_realloc_r>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	4607      	mov	r7, r0
 80046dc:	4614      	mov	r4, r2
 80046de:	460e      	mov	r6, r1
 80046e0:	b921      	cbnz	r1, 80046ec <_realloc_r+0x14>
 80046e2:	4611      	mov	r1, r2
 80046e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046e8:	f7ff bf9c 	b.w	8004624 <_malloc_r>
 80046ec:	b922      	cbnz	r2, 80046f8 <_realloc_r+0x20>
 80046ee:	f7ff ff4b 	bl	8004588 <_free_r>
 80046f2:	4625      	mov	r5, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f8:	f000 f826 	bl	8004748 <_malloc_usable_size_r>
 80046fc:	42a0      	cmp	r0, r4
 80046fe:	d20f      	bcs.n	8004720 <_realloc_r+0x48>
 8004700:	4621      	mov	r1, r4
 8004702:	4638      	mov	r0, r7
 8004704:	f7ff ff8e 	bl	8004624 <_malloc_r>
 8004708:	4605      	mov	r5, r0
 800470a:	2800      	cmp	r0, #0
 800470c:	d0f2      	beq.n	80046f4 <_realloc_r+0x1c>
 800470e:	4631      	mov	r1, r6
 8004710:	4622      	mov	r2, r4
 8004712:	f7ff ff15 	bl	8004540 <memcpy>
 8004716:	4631      	mov	r1, r6
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff ff35 	bl	8004588 <_free_r>
 800471e:	e7e9      	b.n	80046f4 <_realloc_r+0x1c>
 8004720:	4635      	mov	r5, r6
 8004722:	e7e7      	b.n	80046f4 <_realloc_r+0x1c>

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4c06      	ldr	r4, [pc, #24]	; (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4605      	mov	r5, r0
 800472c:	4608      	mov	r0, r1
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	f7fc fbaa 	bl	8000e88 <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	200001e0 	.word	0x200001e0

08004744 <__malloc_lock>:
 8004744:	4770      	bx	lr

08004746 <__malloc_unlock>:
 8004746:	4770      	bx	lr

08004748 <_malloc_usable_size_r>:
 8004748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474c:	1f18      	subs	r0, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfbc      	itt	lt
 8004752:	580b      	ldrlt	r3, [r1, r0]
 8004754:	18c0      	addlt	r0, r0, r3
 8004756:	4770      	bx	lr

08004758 <_init>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr

08004764 <_fini>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr
